set shell dash
set shellopts '-eu'
set ifs "\n"
set scrolloff 5
set ratios 1:2
# set color256
set icons
set period 1
# set hidden
set relativenumber
set drawbox
set previewer ~/.config/lf/previewer.sh
set cleaner ~/.config/lf/clear_img.sh
# source ~/.config/lf/shortcuts

# cmds/functions
cmd open ${{
    case $f in
        http* | *.html) setsid -f "$BROWSER" "$f" 2>/dev/null & ;;
        *.pdf | *.djvu | *.epub | *.cbz) setsid -f "$READER" "$fx" >/dev/null 2>&1 & ;;
        *.mobi | *.azw3) setsid ebook-viewer "$f" & ;;
        *.mkv | *.web | *.mp4 | *avi) setsid mpv -no-terminal "$f" >/dev/null 2>&1 & ;;
        *.mp3 | *.flac | *.opus | *mp3?source*) mpv "$f" ;;
        *.png | *.jpg | *.jpeg | *.gif) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" | nsxiv -aio 2>/dev/null | lf-select & ;;
        *.tar*) tar tf "$f" | less ;;
        *.zip) unzip -l "$f" | less ;;
        *.rar) unrar l "$f" | less ;;
        *.7z) 7z l "$f" | less ;;
        *) case $(file --mime-type "$(readlink -f $f)" -b) in
            audio/*) mpv $f ;;
            application/json) "$EDITOR" $fx ;;
            application/pgp-encrypted) "$EDITOR" $fx ;;
            image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
            image/svg+xml) display -- $f ;;
            image/vnd.djvu | application/pdf | application/octet-stream | application/postscript | application/epub+zip) setsid -f "$READER" $fx >/dev/null 2>&1 ;;
            image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" | nsxiv -aio 2>/dev/null | lf-select & ;;
            text/html) "$BROWSER" $f ;;
            text/*) emacsclient -t $f ;;
            video/*) setsid mpv $f -no-terminal >/dev/null 2>&1 & ;;
            *) xdg-open $f ;;
        esac
    esac
}}

cmd extract ${{
	# clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "extract?[y/N]"
	read ans
	[ $ans = "y" ] && aunpack $fx
}}

cmd mkdir %{{
    IFS=" "
    mkdir -p -- "$*"
    lf -remote "send $id select \"$*\""
}}

cmd delete ${{
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}

cmd moveto ${{
	set -f
    echo "Move to where?"
    dest=$(fdfind -td -E octave -E Packages -E "*/lost+found" -E "*/Music/*" "^[0-9a-zA-Z]*" $HOME | fzf)
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
	set -f
    echo "Copy to where?"
    dest=$(fdfind -td -E octave -E Packages -E "*/lost+found" -E "*/Music/*" "^[0-9a-zA-Z]*" $HOME | fzf)
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

cmd fzf_jump ${{
    res=$(fdfind -td -E octave -E Packages -E "*/lost+found" -E "*/Music/*" "^[0-9a-zA-Z]*" $HOME | fzf)
    # res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ]; then
        cmd="cd"
    else
        cmd="select"
    fi
    lf -remote "send $id $cmd \"$res\""
}}

cmd fzf_search ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}

cmd zle-cd %printf 'cd %q && zle reset-prompt\n' "$PWD" >&$ZLE_FIFO

cmd zle-insert-relative %{{
    for f in $fx; do
        printf 'LBUFFER+="${LBUFFER:+ }${(q)$(realpath %q --relative-to=$PWD)}"\n' "$f" >&$ZLE_FIFO
    done
}}

cmd zle-insert-absolute %{{
    for f in $fx; do
        printf 'LBUFFER+="${LBUFFER:+ }%q"\n' "$f" >&$ZLE_FIFO
    done
}}

cmd zle-init :{{
    map . zle-cd
    map x zle-insert-relative
    map X zle-insert-absolute
}}

&[[ -n "$ZLE_FIFO" ]] && lf -remote "send $id zle-init"

cmd async_paste &{{
    set -- $(lf -remote load)
    mode="$1"
    shift
    case "$mode" in
        copy) cp -rn -- "$@" .;;
        move) mv -n -- "$@" .;;
    esac
    lf -remote "send load"
    lf -remote "send clear"
    notify-send "async done "
}}

cmd backup_paste %{{
    set -- $(lf -remote load)
    mode="$1"
    shift
    case "$mode" in
        copy) cp -r --backup=numbered -- "$@" .;;
        move) mv --backup=numbered -- "$@" .;;
    esac
    lf -remote "send load"
    lf -remote "send clear"
    notify-send "Backup Done "
}}

cmd paste &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -auvrhP --ignore-existing --info=progress2 -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            ;;
        move) mv -n -- "$@" .;;
    esac
    notify-send "RSYNC Done" "$(cat ~/.local/share/lf/files)"
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}
cmd recol %{{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $w -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}

# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd zz %{{
    result="$(zoxide query --exclude "${PWD}" -- "$1")"
    lf -remote "send ${id} cd '${result}'"
}}

cmd zi ${{
    result="$(zoxide query -i -- "$1")"
    lf -remote "send ${id} cd '${result}'"
}}

cmd yank-dirname $dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard
cmd yank-basename $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard
cmd yank-basename-without-extension &basename -a -- $fx | rev | cut -d. -f2- | rev | head -c-1 | xclip -i -selection clipboard

cmd open-with %"$@" $fx

cmd trash %trash-put $fx

# cmd paste $cp-p --lf-paste $id

# Bindings
map <c-b> $setbg $f
map <c-e> down
map <c-n> push :mkdir<space>
map <c-r> reload
map <c-y> up
map <enter> shell
map C copyto
map D trash # delete
map E extract
map I push A<c-a> # at the very beginning
map J fzf_jump
map M moveto
map N chmod
map Pa async_paste
map Pb backup_paste
map Pp :link
map R push A<a-b> # after extention
map W $setsid -f $TERMINAL >/dev/null 2>&1
map Yb yank-basename
map Ybe yank-basename-without-extension
map Yd yank-dirname
map Yp yank-path
map b $vidir
map e &em "$f"
map gg top
map gs :fzf_search
map i !bat "$f"
map o push :open-with<space>
# map A rename # at the very end
# map O $mimeopen --ask "$f"
# map V push :!nvim<space>
# map X !$f
# map c push A<c-u> # new rename
# map i push A<a-b><a-b><a-f> # before extention
# map o &mimeopen $f
# map x $$f
