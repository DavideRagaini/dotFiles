{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Youtube RSS feed URL","options":{"awareOfChrome":false,"check_for_updates":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://www.youtube.com/*","*://youtube.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1609794402412,"data":{}},"enabled":false,"position":1,"uuid":"aa875a49-6eaf-4b9c-8eb0-c3f82ec456da","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBZb3V0dWJlIFJTUyBmZWVkIFVSTAovLyBAdmVyc2lvbiAgICAgIDAuMQovLyBAbWF0Y2ggICAgICAgKjovL3d3dy55b3V0dWJlLmNvbS8qCi8vIEBtYXRjaCAgICAgICAqOi8veW91dHViZS5jb20vKgovLyBAZGVzY3JpcHRpb24gIFJldHVybnMgeW91dHViZSBjaGFubmVsIFJTUyBVUkwKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBmb3IgKHZhciBhcnJTY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpLCBpID0gMDsgaSA8IGFyclNjcmlwdHMubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAoYXJyU2NyaXB0c1tpXS50ZXh0Q29udGVudC5pbmRleE9mKCdjaGFubmVsSWQnKSAhPSAtMSkgewogICAgICAgICAgICB2YXIgY2hhbm5lbElkID0gYXJyU2NyaXB0c1tpXS50ZXh0Q29udGVudC5tYXRjaCgvXCJjaGFubmVsSWRcIlxzKlw6XHMqXCIoLio/KVwiLylbMV07CiAgICAgICAgICAgIHZhciBjaGFubmVsUnNzID0gJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2ZlZWRzL3ZpZGVvcy54bWw/Y2hhbm5lbF9pZD0nICsgY2hhbm5lbElkOwogICAgICAgICAgICB2YXIgY2hhbm5lbFRpdGxlID0gZG9jdW1lbnQudGl0bGUubWF0Y2goL1woP1xkKlwpP1xzPyguKj8pXHNcLVxzWW91VHViZS8pWzFdOwogICAgICAgICAgICBjb25zb2xlLmxvZygnVGhlIHJzcyBmZWVkIG9mIHRoZSBjaGFubmVsIFwnJyArIGNoYW5uZWxUaXRsZSArICdcJyBpczpcbicgKyBjaGFubmVsUnNzKTsKICAgICAgICAgICAgYWxlcnQoJ1RoZSByc3MgZmVlZCBvZiB0aGUgY2hhbm5lbCBcJycgKyBjaGFubmVsVGl0bGUgKyAnXCcgaXM6XG4nICsgY2hhbm5lbFJzcyk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgIH0KfSkoKTs="},{"name":"YouTube RSS Feed","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://www.youtube.com/*","*://youtube.com/*"],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1609795387408,"data":{}},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/1760-youtube-rss-feed/code/YouTube%20RSS%20Feed.user.js","uuid":"b3181be7-93d5-44f0-b7a6-f9018852d59b","source":"","requires":[{"meta":{"name":"jquery.min.js","url":"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js","ts":1609795387839,"mimetype":"text/javascript"},"source":""}]},{"name":"4chan x","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http://boards.4chan.org/*","https://boards.4chan.org/*","http://boards.4channel.org/*","https://boards.4channel.org/*","http://sys.4chan.org/*","https://sys.4chan.org/*","http://a.4cdn.org/*","https://a.4cdn.org/*","http://i.4cdn.org/*","https://i.4cdn.org/*","http://is.4chan.org/*","https://is.4chan.org/*","http://is2.4chan.org/*","https://is2.4chan.org/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1609795819692,"data":{}},"enabled":true,"position":3,"file_url":"https://github.com/loadletter/4chan-x/raw/master/4chan_x.user.js","uuid":"b761e789-cd53-42ce-a3bb-5db0cdf59a18","source":""},{"name":"X-links","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["exhentai.org","e-hentai.org","ehgt.org","nhentai.net","hitomi.la","raw.githubusercontent.com","*"],"orig_excludes":[],"orig_includes":["http://boards.4chan.org/*","https://boards.4chan.org/*","http://boards.4channel.org/*","https://boards.4channel.org/*","http://8ch.net/*","https://8ch.net/*","https://archived.moe/*","https://boards.fireden.net/*","http://desuarchive.org/*","https://desuarchive.org/*","http://fgts.jp/*","https://fgts.jp/*","http://boards.38chan.net/*","http://forums.e-hentai.org/*","https://forums.e-hentai.org/*","https://meguca.org/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1609796002997,"data":{}},"enabled":true,"position":4,"file_url":"https://raw.githubusercontent.com/dnsev-h/x-links/stable/builds/x-links.user.js","uuid":"e98de2c3-0f42-4072-804a-632f8b8fe859","source":""},{"name":"Download github repo sub-folder","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["raw.githubusercontent.com"],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://github.com/*","https://gist.github.com/*"],"orig_noframes":true,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1609796829664,"data":{}},"enabled":true,"position":5,"file_url":"https://greasyfork.org/scripts/411834-download-github-repo-sub-folder/code/Download%20github%20repo%20sub-folder.user.js","uuid":"13509e24-4b9e-4873-802e-3d1ca38011ca","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgRG93bmxvYWQgZ2l0aHViIHJlcG8gc3ViLWZvbGRlcgovLyBAdmVyc2lvbiAwLjIuMwovLyBAYXV0aG9yIFNhaXlhCi8vIEBkZXNjcmlwdGlvbiBkb3dubG9hZCBnaXRodWIgc3ViLWZvbGRlciB2aWEgb25lIGNsaWNrLCBjb3B5IHRoZSBzaW5nbGUgZmlsZSdzIHNvdXJjZSBjb2RlIGVhc2lseQovLyBAc3VwcG9ydFVSTCBodHRwczovL2dpdGh1Yi5jb20vb2UvZG93bmxvYWQtZ2l0LXVzZXJzY3JpcHQvaXNzdWVzCi8vIEBtYXRjaCBodHRwczovL2dpdGh1Yi5jb20vKgovLyBAbWF0Y2ggaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vKgovLyBAbmFtZTp6aC1DTiDlnKjnur/kuIvovb1HaXRodWLku5PlupPmlofku7blpLkKLy8gQG5hbWVzcGFjZSBodHRwczovL2FwcC5ldmVjYWxtLmNvbQovLyBAZGVzY3JpcHRpb246emgtQ04g5peg6ZyA5YWL6ZqGR2l0SHVi5LuT5bqTLCDkuIDplK7lnKjnur/kuIvovb0gR2l0aHVi5LuT5bqT5a2Q5paH5Lu25aS5OyDlkIzml7bov5jog73lnKjmupDnoIHor6bmg4XpobXkuIDplK7lpI3liLbmupDnoIEuCi8vIEBob21lcGFnZVVSTCBodHRwczovL2dpdGh1Yi5jb20vb2UvZG93bmxvYWQtZ2l0LXVzZXJzY3JpcHQKLy8gQGNvbm5lY3QgcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbQovLyBAZ3JhbnQgR01fZG93bmxvYWQKLy8gQGdyYW50IEdNX3htbGh0dHBSZXF1ZXN0Ci8vIEBncmFudCBHTV9zZXRDbGlwYm9hcmQKLy8gQG5vZnJhbWVzIAovLyA9PS9Vc2VyU2NyaXB0PT0KCiFmdW5jdGlvbihlKXt2YXIgdD17fTtmdW5jdGlvbiBuKG8pe2lmKHRbb10pcmV0dXJuIHRbb10uZXhwb3J0czt2YXIgcj10W29dPXtpOm8sbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtvXS5jYWxsKHIuZXhwb3J0cyxyLHIuZXhwb3J0cyxuKSxyLmw9ITAsci5leHBvcnRzfW4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQsbyl7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2VudW1lcmFibGU6ITAsZ2V0Om99KX0sbi5yPWZ1bmN0aW9uKGUpeyJ1bmRlZmluZWQiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6Ik1vZHVsZSJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSl9LG4udD1mdW5jdGlvbihlLHQpe2lmKDEmdCYmKGU9bihlKSksOCZ0KXJldHVybiBlO2lmKDQmdCYmIm9iamVjdCI9PXR5cGVvZiBlJiZlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIG89T2JqZWN0LmNyZWF0ZShudWxsKTtpZihuLnIobyksT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sImRlZmF1bHQiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOmV9KSwyJnQmJiJzdHJpbmciIT10eXBlb2YgZSlmb3IodmFyIHIgaW4gZSluLmQobyxyLGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfS5iaW5kKG51bGwscikpO3JldHVybiBvfSxuLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIG4uZCh0LCJhIix0KSx0fSxuLm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LG4ucD0iIixuKG4ucz0xKX0oW2Z1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbygpe3JldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicmF3LXVybCIpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSx0Lm9wZW5MaW5rPXQuZ2V0Q3VycmVudFVybFBhdGg9dC5nZXRSYXdCdG49dC5nZXRVcmxUZXh0UmVzcG9uc2U9dC5pc1RleHRCYXNlZFNpbmdsZVBhZ2U9dC5pc1JlcG9Sb290RGlyPXQuaXNQcml2YXRlUmVwbz10LmlzUmVwbz10LmlzR2lzdD12b2lkIDAsdC5pc0dpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4iZ2lzdC5naXRodWIuY29tIj09PWxvY2F0aW9uLmhvc3RuYW1lfSx0LmlzUmVwbz1mdW5jdGlvbigpe3JldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIucmVwb3NpdG9yeS1jb250ZW50Iil9LHQuaXNQcml2YXRlUmVwbz1mdW5jdGlvbigpe2NvbnN0IGU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI2pzLXJlcG8tcGpheC1jb250YWluZXIgLmhpZGUtZnVsbC1zY3JlZW4gLkxhYmVsIik7cmV0dXJuIGUmJiJQcml2YXRlIj09PWUudGV4dENvbnRlbnR9LHQuaXNSZXBvUm9vdERpcj1mdW5jdGlvbigpe3JldHVybiEhZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLnJlcG9zaXRvcnktY29udGVudCAgZ2V0LXJlcG8iKX0sdC5pc1RleHRCYXNlZFNpbmdsZVBhZ2U9ZnVuY3Rpb24oKXtpZighbygpKXJldHVybjtyZXR1cm4hIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJyZWFkbWUiKXx8ISFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJ0YWJsZS5oaWdobGlnaHQiKX0sdC5nZXRVcmxUZXh0UmVzcG9uc2U9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBQcm9taXNlKCh0LG4pPT57R01feG1saHR0cFJlcXVlc3Qoe21ldGhvZDoiR0VUIix1cmw6ZSxvbnRpbWVvdXQ6bixvbmFib3J0Om4sb25lcnJvcjpuLG9ubG9hZDplPT57ZS5yZXNwb25zZVRleHQ/dChlLnJlc3BvbnNlVGV4dCk6bihlKX19KX0pfSx0LmdldFJhd0J0bj1vLHQuZ2V0Q3VycmVudFVybFBhdGg9ZnVuY3Rpb24oKXtyZXR1cm4obG9jYXRpb24ub3JpZ2luK2xvY2F0aW9uLnBhdGhuYW1lKS5yZXBsYWNlKC9cLyQvLCIiKX0sdC5vcGVuTGluaz1mdW5jdGlvbihlKXtjb25zdCB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKTt0LnRhcmdldD0iX2JsYW5rIix0LmhyZWY9ZSx0LmNsaWNrKCl9fSxmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciBvPXRoaXMmJnRoaXMuX19jcmVhdGVCaW5kaW5nfHwoT2JqZWN0LmNyZWF0ZT9mdW5jdGlvbihlLHQsbixvKXt2b2lkIDA9PT1vJiYobz1uKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxvLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0W25dfX0pfTpmdW5jdGlvbihlLHQsbixvKXt2b2lkIDA9PT1vJiYobz1uKSxlW29dPXRbbl19KSxyPXRoaXMmJnRoaXMuX19zZXRNb2R1bGVEZWZhdWx0fHwoT2JqZWN0LmNyZWF0ZT9mdW5jdGlvbihlLHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJkZWZhdWx0Iix7ZW51bWVyYWJsZTohMCx2YWx1ZTp0fSl9OmZ1bmN0aW9uKGUsdCl7ZS5kZWZhdWx0PXR9KSxpPXRoaXMmJnRoaXMuX19pbXBvcnRTdGFyfHxmdW5jdGlvbihlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIG4gaW4gZSkiZGVmYXVsdCIhPT1uJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxuKSYmbyh0LGUsbik7cmV0dXJuIHIodCxlKSx0fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7Y29uc3QgdT1pKG4oMCkpLGM9bigwKTshZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7dS5pc1JlcG8oKSYmKGZ1bmN0aW9uKCl7bGV0IGU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLnJlcG9zaXRvcnktY29udGVudCAuZmlsZS1uYXZpZ2F0aW9uIik7aWYoZSl7Y29uc3Qgbj10KGUpO3JldHVybiBuLmNsYXNzTmFtZSs9IiBtbC0yIix2b2lkIGUuYXBwZW5kQ2hpbGQobil9Y29uc3Qgbj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjYmxvYi1tb3JlLW9wdGlvbnMtZGV0YWlscyIpO2lmKCFuKXJldHVybjtlPW4ucGFyZW50RWxlbWVudDtjb25zdCBvPXQoZSk7by5jbGFzc05hbWUrPSIgbXItMiIsbi5pbnNlcnRBZGphY2VudEVsZW1lbnQoImJlZm9yZWJlZ2luIixvKX0oKSxmdW5jdGlvbigpe2lmKCF1LmlzVGV4dEJhc2VkU2luZ2xlUGFnZSgpfHxkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgieGl1LWNvcHktYnRuIikpcmV0dXJuO2NvbnN0IGU9Yy5nZXRSYXdCdG4oKSx0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKTt0LnNldEF0dHJpYnV0ZSgicm9sZSIsImJ1dHRvbiIpLHQuY2xhc3NOYW1lPSJidG4gYnRuLXNtIEJ0bkdyb3VwLWl0ZW0iLHQuaHJlZj0iIyIsdC5pZD0ieGl1LWNvcHktYnRuIix0LnRleHRDb250ZW50PSJDb3B5Iix0Lm9uY2xpY2s9YXN5bmMgdD0+e3QucHJldmVudERlZmF1bHQoKTt0cnl7Y29uc3QgdD1hd2FpdCB1LmdldFVybFRleHRSZXNwb25zZShlLmhyZWYpO0dNX3NldENsaXBib2FyZCh0KX1jYXRjaChlKXtjb25zb2xlLndhcm4oZSl9fSxlLmluc2VydEFkamFjZW50RWxlbWVudCgiYmVmb3JlYmVnaW4iLHQpfSgpKX1mdW5jdGlvbiB0KGUpe2xldCB0PWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ4aXUtZG93bmxvYWQtYnRuIik7dHx8KHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpLHQuaWQ9InhpdS1kb3dubG9hZC1idG4iKSx0LmNsYXNzTmFtZT0iYnRuIGQtbm9uZSBkLW1kLWJsb2NrIix0LnRhcmdldD0iX2JsYW5rIjtsZXQgbj0iIjtpZih1LmlzUmVwb1Jvb3REaXIoKSl7bj1lLnF1ZXJ5U2VsZWN0b3IoJ2dldC1yZXBvIGFbaHJlZiQ9Ii56aXAiXScpLmhyZWZ9ZWxzZSBpZih1LmdldFJhd0J0bigpKXtjb25zdCBlPXUuZ2V0UmF3QnRuKCk7bj1lLmhyZWYsdC5vbmNsaWNrPWZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKTtjb25zdCBuPWUuaHJlZi5zcGxpdCgiLyIpLnBvcCgpO0dNX2Rvd25sb2FkKHt1cmw6ZS5ocmVmLG5hbWU6bixvbmVycm9yOmU9Pntjb25maXJtKGUuZXJyb3IrYDogeW91IG1heSBuZWVkIGFkZCBleHRlbnNpb24gIi4ke24uc3BsaXQoIi4iKS5wb3AoKX0iIHRvIFRhbXBlcm1vbmtleSdzIHdoaXRlbGlzdC4gQ2xpY2sgT0sgdG8gc2VlIGhvdy5gKSYmdS5vcGVuTGluaygiaHR0cHM6Ly9naXRodWIuY29tL29lL2Rvd25sb2FkLWdpdC11c2Vyc2NyaXB0I2NvbmZpZ3VyZS10aGUtc2NyaXB0LW1hbmFnZXIiKX19KX19ZWxzZSBuPSJodHRwczovL21pbmhhc2thbWFsLmdpdGh1Yi5pby9Eb3duR2l0LyMvaG9tZT91cmw9IitlbmNvZGVVUklDb21wb25lbnQodS5nZXRDdXJyZW50VXJsUGF0aCgpKTtyZXR1cm4gdC50ZXh0Q29udGVudD0iRG93bmxvYWQiLHQuaHJlZj1uLHR9ZSgpLGZ1bmN0aW9uKCl7bGV0IHQ7dD11LmlzR2lzdCgpP2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNnaXN0LXBqYXgtY29udGFpbmVyIik6ZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI2pzLXJlcG8tcGpheC1jb250YWluZXIiKTtpZighdClyZXR1cm47bmV3IE11dGF0aW9uT2JzZXJ2ZXIoKGZ1bmN0aW9uKHQpe2NvbnNvbGUubG9nKCJtdXRhdGlvbiBjaGFuZ2UiLHQpLGUoKX0pKS5vYnNlcnZlKHQse2NoaWxkTGlzdDohMCxzdWJ0cmVlOiExfSl9KCl9KCl9XSk7"},{"name":"Wide Github","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["*github.com*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1609796864157,"data":{}},"enabled":true,"position":6,"file_url":"https://openuserjs.org/install/xthexder/Wide_Github.user.js","uuid":"0f460ba1-a59f-49b9-bb83-c0e2e1660e66","source":"InVzZSBzdHJpY3QiOwoKLy8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIFdpZGUgR2l0aHViCi8vIEBuYW1lc3BhY2UgICBodHRwczovL2dpdGh1Yi5jb20veHRoZXhkZXIvd2lkZS1naXRodWIKLy8gQGRlc2NyaXB0aW9uIENoYW5nZSBhbGwgR2l0aHViIHJlcG9zaXRvcnkgYW5kIGdpc3QgcGFnZXMgdG8gYmUgZnVsbCB3aWR0aCBhbmQgZHluYW1pY2FsbHkgc2l6ZWQuCi8vIEBhdXRob3IgICAgICB4dGhleGRlcgovLyBAY29weXJpZ2h0ICAgMjAxMyssIHh0aGV4ZGVyIChodHRwczovL2dpdGh1Yi5jb20veHRoZXhkZXIpCi8vIEBjb250cmlidXRvciBKYXNvbiBGcmV5IChodHRwczovL2dpdGh1Yi5jb20vRnJ5Z3V5KQovLyBAY29udHJpYnV0b3IgTWFydGkgTWFydHogKGh0dHBzOi8vZ2l0aHViLmNvbS9NYXJ0aWkpCi8vIEBjb250cmlidXRvciBQYXVsICJKb2V5IiBDbGFyayAoaHR0cHM6Ly9naXRodWIuY29tL2pvZXl0d2lkZGxlKQovLyBAY29udHJpYnV0b3IgUm9iZXJ0IExhdmVydHkgKGh0dHBzOi8vZ2l0aHViLmNvbS9yb2JsYXY5NikKLy8gQGxpY2Vuc2UgICAgIE1JVDsgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3h0aGV4ZGVyL3dpZGUtZ2l0aHViL21hc3Rlci9MSUNFTlNFCi8vIEB2ZXJzaW9uICAgICAxLjQuMQovLyBAaWNvbiAgICAgICAgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3h0aGV4ZGVyL3dpZGUtZ2l0aHViL21hc3Rlci9pY29uLnBuZwovLyBAaG9tZXBhZ2VVUkwgaHR0cHM6Ly9naXRodWIuY29tL3h0aGV4ZGVyL3dpZGUtZ2l0aHViCi8vIEBzdXBwb3J0VVJMICBodHRwczovL2dpdGh1Yi5jb20veHRoZXhkZXIvd2lkZS1naXRodWIvaXNzdWVzCi8vIEBpbmNsdWRlICAgICAqZ2l0aHViLmNvbSoKLy8gQGdyYW50ICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09Cgp2YXIgc3R5bGVTaGVldCA9ICIiICsKImJvZHk6bm90KC53Z2gtZGlzYWJsZWQpIC5hcHBsaWNhdGlvbi1tYWluIC5jb250YWluZXIgeyIgKwogICJ3aWR0aDogYXV0byAhaW1wb3J0YW50OyIgKwogICJwYWRkaW5nLWxlZnQ6IDE2cHggIWltcG9ydGFudDsiICsKICAicGFkZGluZy1yaWdodDogMTZweCAhaW1wb3J0YW50OyIgKwogICJtYXJnaW4tbGVmdDogMHB4ICFpbXBvcnRhbnQ7IiArCiAgIm1pbi13aWR0aDogOTgwcHg7IiArCiJ9IiArCiJib2R5Om5vdCgud2doLWRpc2FibGVkKSAuYXBwbGljYXRpb24tbWFpbiAuY29udGFpbmVyLWxnLCIgKwoiYm9keTpub3QoLndnaC1kaXNhYmxlZCkgLmZvb3Rlci5jb250YWluZXItbGcgeyIgKwogICJtYXgtd2lkdGg6IG5vbmUgIWltcG9ydGFudDsiICsKICAibWFyZ2luLWxlZnQ6IDBweCAhaW1wb3J0YW50OyIgKwoifSIgKwoKLy8gRmxvYXRpbmcgUFIgdG9vbGJhcgoiYm9keTpub3QoLndnaC1kaXNhYmxlZCkgLnByLXRvb2xiYXIgeyIgKwogICJtYXJnaW4tbGVmdDogLTE2cHggIWltcG9ydGFudDsiICsKICAibWFyZ2luLXJpZ2h0OiAtMTZweCAhaW1wb3J0YW50OyIgKwogICJwYWRkaW5nLWxlZnQ6IDE2cHggIWltcG9ydGFudDsiICsKICAicGFkZGluZy1yaWdodDogMTZweCAhaW1wb3J0YW50OyIgKwoifSIgKwoKLy8gUmVwb3NpdG9yeSBJc3N1ZXMKImJvZHk6bm90KC53Z2gtZGlzYWJsZWQpICNqcy1yZXBvLXBqYXgtY29udGFpbmVyIC5yZXBvc2l0b3J5LWNvbnRlbnQgLmRpc2N1c3Npb24tdGltZWxpbmUgeyIgKyAgLy8gSXNzdWUgYm9keQogICJ3aWR0aDogMTAwJSAhaW1wb3J0YW50OyIgKwoifSIgKwoiYm9keTpub3QoLndnaC1kaXNhYmxlZCkgLnJlcG9zaXRvcnktY29udGVudCAudGltZWxpbmUtbmV3LWNvbW1lbnQgeyIgKyAvLyBOZXcgSXNzdWUgLyBpc3N1ZSBjb21tZW50IGZvcm0KICAibWF4LXdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7IiArCiJ9IiArCiJib2R5Om5vdCgud2doLWRpc2FibGVkKSAucmVwb3NpdG9yeS1jb250ZW50IC5pbmxpbmUtY29tbWVudHMgLmNvbW1lbnQtaG9sZGVyLCIgKyAvLyBEaWZmIC8gY29kZSBjb21tZW50cwoiYm9keTpub3QoLndnaC1kaXNhYmxlZCkgLnJlcG9zaXRvcnktY29udGVudCAuaW5saW5lLWNvbW1lbnRzIC5pbmxpbmUtY29tbWVudC1mb3JtLWNvbnRhaW5lciwiICsKImJvZHk6bm90KC53Z2gtZGlzYWJsZWQpIC5yZXBvc2l0b3J5LWNvbnRlbnQgLmlubGluZS1jb21tZW50cyAuaW5saW5lLWNvbW1lbnQtZm9ybSwiICsKImJvZHk6bm90KC53Z2gtZGlzYWJsZWQpIC5yZXBvc2l0b3J5LWNvbnRlbnQgI2FsbF9jb21taXRfY29tbWVudHMgLmNvbW1pdC1jb21tZW50cy1oZWFkaW5nLCIgKwoiYm9keTpub3QoLndnaC1kaXNhYmxlZCkgLnJlcG9zaXRvcnktY29udGVudCAjYWxsX2NvbW1pdF9jb21tZW50cyAuY29tbWVudC1ob2xkZXIgeyIgKwogICJtYXgtd2lkdGg6IGluaGVyaXQgIWltcG9ydGFudDsiICsKIn0iICsKCi8vIFJlcG9zaXRvcnkgZ3JhcGggcGFnZQoiYm9keTpub3QoLndnaC1kaXNhYmxlZCkgLnJlcG9zaXRvcnktY29udGVudCAuY2FwcGVkLWNhcmQtY29udGVudCB7IiArIC8vIEdyYXBoIGNhcmRzIG9uIGNvbnRyaWJ1dG9ycyAvIGdyYXBoIGxpc3QKICAid2lkdGg6IDEwMCUgIWltcG9ydGFudDsiICsKIn0iICsKCi8vIEdpc3RzCiJib2R5Om5vdCgud2doLWRpc2FibGVkKSAuZ2lzdC1jb250ZW50LXdyYXBwZXIgLmNvbnRhaW5lciB7IiArCiAgIndpZHRoOiBhdXRvICFpbXBvcnRhbnQ7IiArCiAgIm1hcmdpbi1sZWZ0OiAyMHB4ICFpbXBvcnRhbnQ7IiArCiAgIm1hcmdpbi1yaWdodDogMjBweCAhaW1wb3J0YW50OyIgKwogICJtaW4td2lkdGg6IDk4MHB4OyIgKwoifSIgKwoiYm9keTpub3QoLndnaC1kaXNhYmxlZCkgLmdpc3QtY29udGVudC13cmFwcGVyIC5jb250YWluZXItbGcgeyIgKwogICJtYXgtd2lkdGg6IG5vbmUgIWltcG9ydGFudDsiICsKIn0iICsKImJvZHk6bm90KC53Z2gtZGlzYWJsZWQpIC5naXN0LWNvbnRlbnQtd3JhcHBlciAuY29udGFpbmVyLWxnIC5oLWNhcmQgeyIgKwogICJ3aWR0aDogMjUzcHggIWltcG9ydGFudDsiICsKIn0iICsKCiIiOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7CiAgcy50eXBlID0gInRleHQvY3NzIjsKICBzLmlubmVySFRNTCA9IHN0eWxlU2hlZXQ7CiAgKGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5hcHBlbmRDaGlsZChzKTsKfSkoKTsK"},{"name":"Stack Overflow Extras (SOX)","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["*://data.stackexchange.com/*","*://api.stackexchange.com/*","*://stackoverflow.com/c/*"],"orig_includes":[],"orig_matches":["https://*.stackoverflow.com/*","https://*.stackexchange.com/*","https://*.superuser.com/*","https://*.serverfault.com/*","https://*.askubuntu.com/*","https://*.stackapps.com/*","https://*.mathoverflow.net/*","*://github.com/soscripted/*","*://soscripted.github.io/sox/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"SOX-accessToken":"n-2","SOX-lastVersionInstalled":"s2.7.0"},"ts":1609797278872},"enabled":true,"position":7,"file_url":"https://github.com/soscripted/sox/raw/v2.7.0/sox.user.js","uuid":"93a1a13c-b07c-4ba0-b34b-32c47dd780fc","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBTdGFjayBPdmVyZmxvdyBFeHRyYXMgKFNPWCkKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vc29zY3JpcHRlZC9zb3gKLy8gQGhvbWVwYWdlICAgICBodHRwczovL2dpdGh1Yi5jb20vc29zY3JpcHRlZC9zb3gKLy8gQGhvbWVwYWdlVVJMICBodHRwczovL2dpdGh1Yi5jb20vc29zY3JpcHRlZC9zb3gKLy8gQHZlcnNpb24gICAgICAyLjcuMAovLyBAZGVzY3JpcHRpb24gIEV4dHJhIG9wdGlvbmFsIGZlYXR1cmVzIGZvciBTdGFjayBPdmVyZmxvdyBhbmQgU3RhY2sgRXhjaGFuZ2Ugc2l0ZXMKLy8gQGNvbnRyaWJ1dG9yICDhtInKnnXHnSAoaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS91c2Vycy8xNDU0NTM4LywgaHR0cHM6Ly9naXRodWIuY29tL21lem1pKQovLyBAY29udHJpYnV0b3IgIOGUleGWuuGYjuGViiAoaHR0cHM6Ly9zdGFja2V4Y2hhbmdlLmNvbS91c2Vycy80MzM3ODEwLywgaHR0cHM6Ly9naXRodWIuY29tL3NodTgpCi8vIEBjb250cmlidXRvciAgU2lyLUN1bWZlcmVuY2UgKGh0dHBzOi8vc3RhY2tleGNoYW5nZS5jb20vdXNlcnMvNDExOTE0Mi8sIGh0dHBzOi8vZ2l0aHViLmNvbS9TaXItQ3VtZmVyZW5jZSkKLy8gQGNvbnRyaWJ1dG9yICBHYXVyYW5nVGFuZG9uIChodHRwczovL2dpdGh1Yi5jb20vR2F1cmFuZ1RhbmRvbikKLy8gQGNvbnRyaWJ1dG9yICBkb3VibGUtYmVlcCAoaHR0cHM6Ly9zdGFja2V4Y2hhbmdlLmNvbS91c2Vycy8xNDY4ODQzNy9kb3VibGUtYmVlcCwgaHR0cHM6Ly9naXRodWIuY29tL2RvdWJsZS1iZWVwKQovLyBAdXBkYXRlVVJMICAgIGh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9naC9zb3NjcmlwdGVkL3NveEBkZXYvc294LnVzZXIuanMKCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly8qLnN0YWNrb3ZlcmZsb3cuY29tLyoKLy8gQG1hdGNoICAgICAgICBodHRwczovLyouc3RhY2tleGNoYW5nZS5jb20vKgovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vKi5zdXBlcnVzZXIuY29tLyoKLy8gQG1hdGNoICAgICAgICBodHRwczovLyouc2VydmVyZmF1bHQuY29tLyoKLy8gQG1hdGNoICAgICAgICBodHRwczovLyouYXNrdWJ1bnR1LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly8qLnN0YWNrYXBwcy5jb20vKgovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vKi5tYXRob3ZlcmZsb3cubmV0LyoKLy8gQG1hdGNoICAgICAgICAqOi8vZ2l0aHViLmNvbS9zb3NjcmlwdGVkLyoKLy8gQG1hdGNoICAgICAgICAqOi8vc29zY3JpcHRlZC5naXRodWIuaW8vc294LyoKCi8vIEBleGNsdWRlICAgICAgKjovL2RhdGEuc3RhY2tleGNoYW5nZS5jb20vKgovLyBAZXhjbHVkZSAgICAgICo6Ly9hcGkuc3RhY2tleGNoYW5nZS5jb20vKgovLyBAZXhjbHVkZSAgICAgICo6Ly9zdGFja292ZXJmbG93LmNvbS9jLyoKCi8vIEByZXF1aXJlICAgICAgaHR0cHM6Ly9jb2RlLmpxdWVyeS5jb20vanF1ZXJ5LTMuMy4xLm1pbi5qcwovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vY29kZS5qcXVlcnkuY29tL3VpLzEuMTIuMS9qcXVlcnktdWkubWluLmpzCi8vIEByZXF1aXJlICAgICAgaHR0cHM6Ly9hcGkuc3RhY2tleGNoYW5nZS5jb20vanMvMi4wL2FsbC5qcwovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2pxdWVyeS10aW1lYWdvLzEuNS4zL2pxdWVyeS50aW1lYWdvLm1pbi5qcwoKLy8gQHJlcXVpcmUgICAgICBzb3guY29tbW9uLmpzCi8vIEByZXF1aXJlICAgICAgc294LmdpdGh1Yi5qcwovLyBAcmVxdWlyZSAgICAgIHNveC5kaWFsb2cuanMKLy8gQHJlcXVpcmUgICAgICBzb3guZmVhdHVyZXMuanMKCi8vIEByZXNvdXJjZSAgICAgY3NzIHNveC5jc3MKLy8gQHJlc291cmNlICAgICBkaWFsb2cgc294LmRpYWxvZy5odG1sCi8vIEByZXNvdXJjZSAgICAgZmVhdHVyZXNKU09OIHNveC5mZWF0dXJlcy5pbmZvLmpzb24KLy8gQHJlc291cmNlICAgICBjb21tb24gc294LmNvbW1vbi5pbmZvLmpzb24KLy8gQHJlc291cmNlICAgICBzcHJpdGVzIHNveC5zcHJpdGVzLnN2ZwoKLy8gQGdyYW50ICAgICAgICBHTV9zZXRWYWx1ZQovLyBAZ3JhbnQgICAgICAgIEdNX2dldFZhbHVlCi8vIEBncmFudCAgICAgICAgR01fZGVsZXRlVmFsdWUKLy8gQGdyYW50ICAgICAgICBHTV9saXN0VmFsdWVzCi8vIEBncmFudCAgICAgICAgR01fZ2V0UmVzb3VyY2VUZXh0Ci8vIEBncmFudCAgICAgICAgR01fYWRkU3R5bGUKLy8gQGdyYW50ICAgICAgICBHTV9pbmZvCi8vIEBncmFudCAgICAgICAgR01fc2V0Q2xpcGJvYXJkCi8vID09L1VzZXJTY3JpcHQ9PQovKmpzaGludCBsb29wZnVuYzogdHJ1ZSovCihmdW5jdGlvbihzb3gsICQpIHsKICAndXNlIHN0cmljdCc7CgogIGZ1bmN0aW9uIGluaXQoKSB7CiAgICBpZiAoc294LmxvY2F0aW9uLm9uKCdnaXRodWIuY29tL3Nvc2NyaXB0ZWQnKSkgewogICAgICB0cnkgewogICAgICAgIHNveC5naXRodWIuaW5pdChzb3guaW5mby52ZXJzaW9uLCBzb3guaW5mby5oYW5kbGVyKTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIHRocm93ICgnU09YOiBUaGVyZSB3YXMgYW4gZXJyb3Igd2hpbGUgYXR0ZW1wdGluZyB0byBpbml0aWFsaXplIHRoZSBzb3guZ2l0aHViLmpzIGZpbGUsIHBsZWFzZSByZXBvcnQgdGhpcyBvbiBHaXRIdWIuXG4nICsgZSk7CiAgICAgIH0KICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChzb3gubG9jYXRpb24ub24oJ3Nvc2NyaXB0ZWQuZ2l0aHViLmlvL3NveC8jYWNjZXNzX3Rva2VuJykpIHsgLy9zYXZlIGFjY2VzcyB0b2tlbgogICAgICB0cnkgewogICAgICAgIGNvbnN0IGFjY2Vzc190b2tlbiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KCc9JylbMV0uc3BsaXQoJyYnKVswXTsKICAgICAgICBzb3gubG9naW5mbygnQUNDRVNTIFRPS0VOOiAnLCBhY2Nlc3NfdG9rZW4pOwogICAgICAgIEdNX3NldFZhbHVlKCdTT1gtYWNjZXNzVG9rZW4nLCBhY2Nlc3NfdG9rZW4pOwogICAgICAgIGFsZXJ0KCdBY2Nlc3MgdG9rZW4gc3VjY2Vzc2Z1bGx5IHNhdmVkISBZb3UgY2FuIGNsb3NlIHRoaXMgd2luZG93IDopJyk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICB0aHJvdyAoJ1NPWDogVGhlcmUgd2FzIGFuIGVycm9yIHNhdmluZyB5b3VyIGFjY2VzcyB0b2tlbicpOwogICAgICB9CiAgICAgIHJldHVybjsKICAgIH0KICAgIGlmIChzb3guaW5mby5kZWJ1Z2dpbmcpIHsKICAgICAgc294LmRlYnVnKCdERUJVR0dJTkcgU09YIFZFUlNJT04gJyArIHNveC5pbmZvLnZlcnNpb24pOwogICAgICBzb3guZGVidWcoJy0tLS0tLS0tLS0tLS0tLS1zYXZlZCB2YXJpYWJsZXMtLS0tLS0tLS0tLS0tLS0tLS0tLS0nKTsKICAgICAgc294LnNldHRpbmdzLndyaXRlVG9Db25zb2xlKHRydWUpOyAvL3RydWUgPT4gaGlkZSBhY2Nlc3MgdG9rZW4KICAgICAgc294LmRlYnVnKCctLS0tLS0tLS0tLS0tLS0tZW5kIHNhdmVkIHZhcmlhYmxlcy0tLS0tLS0tLS0tLS0tLS0tLS0tLScpOwogICAgfQoKICAgIGNvbnN0IHNwcml0ZXNEaXYgPSAkKCc8ZGl2Lz4nLCB7IGh0bWw6IEdNX2dldFJlc291cmNlVGV4dCgnc3ByaXRlcycpIH0pOwogICAgJCgnaGVhZCcpLmFwcGVuZChzcHJpdGVzRGl2KTsKCiAgICBHTV9hZGRTdHlsZShHTV9nZXRSZXNvdXJjZVRleHQoJ2NzcycpKTsKCiAgICBjb25zdCBzZXR0aW5ncyA9IHNveC5zZXR0aW5ncy5sb2FkKCk7CiAgICAvL3JldHVybnMgdW5kZWZpbmVkIGlmIG5vdCBzZXQKCiAgICBjb25zdCBmZWF0dXJlSW5mbyA9IEpTT04ucGFyc2UoR01fZ2V0UmVzb3VyY2VUZXh0KCdmZWF0dXJlc0pTT04nKSk7CgogICAgdHJ5IHsKICAgICAgc294LmRlYnVnKCdTT1ggb2JqZWN0Jywgc294KTsKICAgICAgc294LmRpYWxvZy5pbml0KHsKICAgICAgICB2ZXJzaW9uOiBzb3guaW5mby52ZXJzaW9uLAogICAgICAgIGZlYXR1cmVzOiBmZWF0dXJlSW5mbywKICAgICAgICBzZXR0aW5nczogc2V0dGluZ3MsCiAgICAgICAgbGFzdFZlcnNpb25JbnN0YWxsZWQ6IHNveC5pbmZvLmxhc3RWZXJzaW9uSW5zdGFsbGVkLAogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgKCdTT1g6IFRoZXJlIHdhcyBhbiBlcnJvciB3aGlsZSBhdHRlbXB0aW5nIHRvIGluaXRpYWxpemUgdGhlIFNPWCBTZXR0aW5ncyBEaWFsb2csIHBsZWFzZSByZXBvcnQgdGhpcyBvbiBHaXRIdWIuXG4nICsgZSk7CiAgICB9CgogICAgaWYgKHNveC5zZXR0aW5ncy5hdmFpbGFibGUpIHsKICAgICAgLy8gRXhlY3V0ZSBmZWF0dXJlcwogICAgICBwZXJmb3JtYW5jZS5tYXJrKCdhbGxGZWF0dXJlcy1zdGFydCcpOwogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNldHRpbmdzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgY29uc3QgY2F0ZWdvcnkgPSBzZXR0aW5nc1tpXS5zcGxpdCgnLScpWzBdOwogICAgICAgIGNvbnN0IGZlYXR1cmVJZCA9IHNldHRpbmdzW2ldLnNwbGl0KCctJylbMV07CgogICAgICAgIGlmICghKGNhdGVnb3J5IGluIGZlYXR1cmVJbmZvLmNhdGVnb3JpZXMpKSB7IC8vaWYgd2UgZXZlciByZW5hbWUgYSBjYXRlZ29yeQogICAgICAgICAgc294LmxvZ2luZm8oJ0RlbGV0aW5nIGZlYXR1cmUgIicgKyBzZXR0aW5nc1tpXSArICciIChjYXRlZ29yeSByZW5hbWU/KScpOwogICAgICAgICAgc2V0dGluZ3Muc3BsaWNlKGksIDEpOwogICAgICAgICAgc294LnNldHRpbmdzLnNhdmUoc2V0dGluZ3MpOwogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQoKICAgICAgICBjb25zdCBmZWF0dXJlID0gZmVhdHVyZUluZm8uY2F0ZWdvcmllc1tjYXRlZ29yeV0uZmlsdGVyKG9iaiA9PiB7CiAgICAgICAgICByZXR1cm4gb2JqLm5hbWUgPT0gZmVhdHVyZUlkOwogICAgICAgIH0pWzBdOwoKICAgICAgICBsZXQgcnVuRmVhdHVyZSA9IHRydWU7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIC8vTk9URTogdGhlcmUgaXMgbm8gZWxzZSBpZigpIGJlY2F1c2UgaXQgaXMgcG9zc2libGUgdG8gaGF2ZSBib3RoIG1hdGNoIGFuZCBleGNsdWRlIHBhdHRlcm5zLi4KICAgICAgICAgIC8vd2hpY2ggY291bGQgaGF2ZSBtaW5vciBleGNlcHRpb25zIG1ha2luZyBpdCBuZWNjZXNzYXJ5IHRvIGNoZWNrIGJvdGgKICAgICAgICAgIGlmIChmZWF0dXJlLm1hdGNoICE9PSAnJykgewogICAgICAgICAgICBjb25zdCBzaXRlcyA9IGZlYXR1cmUubWF0Y2guc3BsaXQoJywnKTsKCiAgICAgICAgICAgIGZvciAobGV0IHBhdHRlcm4gPSAwOyBwYXR0ZXJuIDwgc2l0ZXMubGVuZ3RoOyBwYXR0ZXJuKyspIHsKICAgICAgICAgICAgICBpZiAoIXNveC5sb2NhdGlvbi5tYXRjaFdpdGhQYXR0ZXJuKHNpdGVzW3BhdHRlcm5dKSkgewogICAgICAgICAgICAgICAgcnVuRmVhdHVyZSA9IGZhbHNlOyAvL25vbmUgb2YgdGhlIHBhdHRlcm5zIG1hdGNoIHRoZSBjdXJyZW50IHNpdGUuLiB5ZXQuCiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJ1bkZlYXR1cmUgPSB0cnVlOwogICAgICAgICAgICAgICAgYnJlYWs7IC8vaWYgaXQgZG9lcyBtYXRjaCwgdGhlbiBzdG9wIGxvb3Bpbmc7IHdlIHdhbnQgdGhlIGZlYXR1cmUgdG8gcnVuCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoZmVhdHVyZS5leGNsdWRlICE9PSAnJykgewogICAgICAgICAgICBjb25zdCBzaXRlcyA9IGZlYXR1cmUuZXhjbHVkZS5zcGxpdCgnLCcpOwoKICAgICAgICAgICAgZm9yIChsZXQgcGF0dGVybiA9IDA7IHBhdHRlcm4gPCBzaXRlcy5sZW5ndGg7IHBhdHRlcm4rKykgewogICAgICAgICAgICAgIGlmIChzb3gubG9jYXRpb24ubWF0Y2hXaXRoUGF0dGVybihzaXRlc1twYXR0ZXJuXSkpIHsgLy9pZiBjdXJyZW50IHNpdGUgaXMgaW4gbGlzdCwgRE9OJ1QgcnVuIGZlYXR1cmUKICAgICAgICAgICAgICAgIHJ1bkZlYXR1cmUgPSBmYWxzZTsgLy9kb24ndCBydW4gZmVhdHVyZQogICAgICAgICAgICAgICAgYnJlYWs7IC8vbm8gbmVlZCB0byBrZWVwIG9uIGxvb3BpbmcKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChydW5GZWF0dXJlKSB7CiAgICAgICAgICAgIHNveC5kZWJ1ZygncnVubmluZyAnICsgZmVhdHVyZUlkKTsKICAgICAgICAgICAgcGVyZm9ybWFuY2UubWFyayhgJHtmZWF0dXJlSWR9LXN0YXJ0YCk7CiAgICAgICAgICAgIGlmIChmZWF0dXJlLnNldHRpbmdzKSB7CiAgICAgICAgICAgICAgY29uc3Qgc2V0dGluZ3NUb1Bhc3MgPSBHTV9nZXRWYWx1ZSgnU09YLScgKyBmZWF0dXJlSWQgKyAnLXNldHRpbmdzJykgPyBKU09OLnBhcnNlKEdNX2dldFZhbHVlKCdTT1gtJyArIGZlYXR1cmVJZCArICctc2V0dGluZ3MnKSkgOiB7fTsKICAgICAgICAgICAgICBzb3guZmVhdHVyZXNbZmVhdHVyZUlkXShzZXR0aW5nc1RvUGFzcyk7IC8vcnVuIHRoZSBmZWF0dXJlIGlmIG1hdGNoIGFuZCBleGNsdWRlIGNvbmRpdGlvbnMgYXJlIG1ldCwgcGFzcyBvbiBzZXR0aW5ncyBvYmplY3QKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBzb3guZmVhdHVyZXNbZmVhdHVyZUlkXSgpOyAvL3J1biB0aGUgZmVhdHVyZSBpZiBtYXRjaCBhbmQgZXhjbHVkZSBjb25kaXRpb25zIGFyZSBtZXQKICAgICAgICAgICAgfQogICAgICAgICAgICBwZXJmb3JtYW5jZS5tYXJrKGAke2ZlYXR1cmVJZH0tZW5kYCk7CiAgICAgICAgICAgIHBlcmZvcm1hbmNlLm1lYXN1cmUoZmVhdHVyZUlkLCBgJHtmZWF0dXJlSWR9LXN0YXJ0YCwgYCR7ZmVhdHVyZUlkfS1lbmRgKTsKICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgIGlmICghc294LmZlYXR1cmVzW2ZlYXR1cmVJZF0gfHwgIWZlYXR1cmUpIHsgLy9yZW1vdmUgZGVwcmVjYXRlZC8nY29ycnVwdCcgZmVhdHVyZSBJRHMgZnJvbSBzYXZlZCBzZXR0aW5ncwogICAgICAgICAgICBzb3gubG9naW5mbygnRGVsZXRpbmcgZmVhdHVyZSAiJyArIHNldHRpbmdzW2ldICsgJyIgKGZlYXR1cmUgbm90IGZvdW5kKScpOwogICAgICAgICAgICBzZXR0aW5ncy5zcGxpY2UoaSwgMSk7CiAgICAgICAgICAgIHNveC5zZXR0aW5ncy5zYXZlKHNldHRpbmdzKTsKICAgICAgICAgICAgJCgnI3NveC1zZXR0aW5ncy1kaWFsb2ctZmVhdHVyZXMnKS5maW5kKCcjJyArIHNldHRpbmdzW2ldLnNwbGl0KCctJylbMV0pLnBhcmVudCgpLnBhcmVudCgpLnJlbW92ZSgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJCgnI3NveC1zZXR0aW5ncy1kaWFsb2ctZmVhdHVyZXMnKS5maW5kKCcjJyArIHNldHRpbmdzW2ldLnNwbGl0KCctJylbMV0pLnBhcmVudCgpLmNzcygnY29sb3InLCAncmVkJykuYXR0cigndGl0bGUnLCAnVGhlcmUgd2FzIGFuIGVycm9yIGxvYWRpbmcgdGhpcyBmZWF0dXJlLiBQbGVhc2UgcmFpc2UgYW4gaXNzdWUgb24gR2l0SHViLicpOwogICAgICAgICAgICBzb3guZXJyb3IoJ1RoZXJlIHdhcyBhbiBlcnJvciBsb2FkaW5nIHRoZSBmZWF0dXJlICInICsgc2V0dGluZ3NbaV0gKyAnIi4gUGxlYXNlIHJhaXNlIGFuIGlzc3VlIG9uIEdpdEh1YiwgYW5kIGNvcHkgdGhlIGZvbGxvd2luZyBlcnJvciBsb2c6XG4nICsgZXJyKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgcGVyZm9ybWFuY2UubWFyaygnYWxsRmVhdHVyZXMtZW5kJyk7CiAgICAgIHBlcmZvcm1hbmNlLm1lYXN1cmUoJ2FsbEZlYXR1cmVzJywgJ2FsbEZlYXR1cmVzLXN0YXJ0JywgJ2FsbEZlYXR1cmVzLWVuZCcpOwogICAgICBzb3guZGVidWcoJ1BlcmZvcm1hbmNlIERhdGEnLCBwZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlUeXBlKCdtZWFzdXJlJykpOwogICAgfQoKICAgIC8vY3VzdG9tIGV2ZW50cy4uLi4KICAgIHNveC5oZWxwZXJzLm9ic2VydmUoWy4uLmRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Bvc3QtbGF5b3V0JyldLCAnLm5ld19jb21tZW50LCAuY29tbWVudCwgLmNvbW1lbnRzLCAuY29tbWVudC10ZXh0Jywgbm9kZSA9PiB7CiAgICAgIHNveC5kZWJ1Zygnc294LW5ldy1jb21tZW50IGV2ZW50IHRyaWdnZXJlZCcpOwogICAgICAkKGRvY3VtZW50KS50cmlnZ2VyKCdzb3gtbmV3LWNvbW1lbnQnLCBbbm9kZV0pOwogICAgfSk7CgogICAgc294LmhlbHBlcnMub2JzZXJ2ZShkb2N1bWVudC5ib2R5LCAndGV4dGFyZWFbaWRePSJ3bWQtaW5wdXQiXScsIG5vZGUgPT4gewogICAgICBzb3guZGVidWcoJ3NveC1lZGl0LXdpbmRvdyBldmVudCB0cmlnZ2VyZWQnKTsKICAgICAgJChkb2N1bWVudCkudHJpZ2dlcignc294LWVkaXQtd2luZG93JywgW25vZGVdKTsKICAgIH0pOwoKICAgIHNveC5oZWxwZXJzLm9ic2VydmUoZG9jdW1lbnQuYm9keSwgJy5yZXZpZXdhYmxlLXBvc3QsIC5yZXZpZXctY29udGVudCcsIG5vZGUgPT4gewogICAgICBzb3guZGVidWcoJ3NveC1uZXctcmV2aWV3LXBvc3QtYXBwZWFyZWQgZXZlbnQgdHJpZ2dlcmVkJyk7CiAgICAgICQoZG9jdW1lbnQpLnRyaWdnZXIoJ3NveC1uZXctcmV2aWV3LXBvc3QtYXBwZWFyZWQnLCBbbm9kZV0pOwogICAgfSk7CgogICAgY29uc3QgY2hhdEJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhdC1ib2R5Jyk7CiAgICBpZiAoY2hhdEJvZHkpIHsKICAgICAgc294LmhlbHBlcnMub2JzZXJ2ZShjaGF0Qm9keSwgJy51c2VyLXBvcHVwJywgbm9kZSA9PiB7CiAgICAgICAgc294LmRlYnVnKCdzb3gtY2hhdC11c2VyLXBvcHVwIGV2ZW50IHRyaWdnZXJlZCcpOwogICAgICAgICQoZG9jdW1lbnQpLnRyaWdnZXIoJ3NveC1jaGF0LXVzZXItcG9wdXAnLCBbbm9kZV0pOwogICAgICB9KTsKICAgIH0KCiAgICBpZiAoR01fZ2V0VmFsdWUoJ1NPWC1hY2Nlc3NUb2tlbicsIC0xKSA9PSAtMSkgeyAvL3NldCBhY2Nlc3MgdG9rZW4KICAgICAgLy9UaGlzIHdhcyBvcmlnaW5hbGx5IGEgc2VyaWVzIG9mIElJRkVzIGFwcGVuZGVkIHRvIHRoZSBoZWFkIHdoaWNoIHVzZWQgdGhlIFNFIEFQSSBKUyBTREsgYnV0CiAgICAgIC8vaXQgd2FzIHZlcnkgdW5jZXJ0YWluIGFuZCBvZnRlbiBjYXVzZWQgaXNzdWVzLCBlc3BlY2lhbGx5IGluIEZGCiAgICAgIC8vaXQgbm93IHVzZXMgYSBHaXRodWIgcGFnZSB0byBzaG93IHRoZSBhY2Nlc3MgdG9rZW4KICAgICAgLy9hbmQgZGV0ZWN0cyB0aGF0IHBhZ2UgYW5kIHNhdmVzIGl0IGF1dG9tYXRpY2FsbHkuCiAgICAgIC8vdGhpcyBzZWVtcyB0byBiZSBhIG11Y2ggY2xlYW5lciBhbmQgZWFzaWVyLXRvLWRlYnVnIG1ldGhvZCEKICAgICAgR01fc2V0VmFsdWUoJ1NPWC1hY2Nlc3NUb2tlbicsIC0yKTsgLy9vbmNlIHdlIGFzayB0aGUgdXNlciBvbmNlLCBkb24ndCBhc2sgdGhlbSBhZ2Fpbjogc2V0IHRoZSB2YWx1ZSB0byAtMiBzbyB0aGlzIElGIG5ldmVyIGV2YWx1YXRlcyB0byB0cnVlCiAgICAgIGNvbnN0IGFza1VzZXJUb0F1dGhvcmlzZSA9IHdpbmRvdy5jb25maXJtKCdUbyBnZXQgdGhlIG1vc3Qgb3V0IG9mIFNPWCwgeW91IHNob3VsZCBnZXQgYW4gYWNjZXNzIHRva2VuISBQbGVhc2UgcHJlc3MgIk9LIiB0byBjb250aW51ZSBhbmQgZm9sbG93IHRoZSBpbnN0cnVjdGlvbnMgaW4gdGhlIHdpbmRvdyB0aGF0IG9wZW5zLiBOT1RFOiB0aGlzIG1lc3NhZ2Ugd2lsbCBub3QgYXBwZWFyIGFnYWluOyBpZiB5b3UgY2hvb3NlIG5vdCB0bywgeW91IGNhbiBjbGljayB0aGUga2V5IGF0IHRoZSBib3R0b20gb2YgdGhlIHNldHRpbmdzIGRpYWxvZyBhdCBhbnl0aW1lIHRvIGdldCBvbmUuJyk7CiAgICAgIGlmIChhc2tVc2VyVG9BdXRob3Jpc2UpIHdpbmRvdy5vcGVuKCdodHRwczovL3N0YWNrZXhjaGFuZ2UuY29tL29hdXRoL2RpYWxvZz9jbGllbnRfaWQ9NzEzOCZzY29wZT1ub19leHBpcnkmcmVkaXJlY3RfdXJpPWh0dHA6Ly9zb3NjcmlwdGVkLmdpdGh1Yi5pby9zb3gvJyk7CiAgICAgIHNveC53YXJuKCdQbGVhc2UgZ28gdG8gdGhlIGZvbGxvd2luZyBVUkwgdG8gZ2V0IHlvdXIgYWNjZXNzIHRva2VuIGZvciBjZXJ0YWluIFNPWCBmZWF0dXJlcycsICdodHRwczovL3N0YWNrZXhjaGFuZ2UuY29tL29hdXRoL2RpYWxvZz9jbGllbnRfaWQ9NzEzOCZzY29wZT1ub19leHBpcnkmcmVkaXJlY3RfdXJpPWh0dHA6Ly9zb3NjcmlwdGVkLmdpdGh1Yi5pby9zb3gvJyk7CiAgICB9CiAgfQogIHNveC5yZWFkeShpbml0KTsKfSkod2luZG93LnNveCA9IHdpbmRvdy5zb3ggfHwge30sIGpRdWVyeSk7Cg==","resources":[{"meta":{"name":"sox.css","url":"https://github.com/soscripted/sox/raw/v2.7.0/sox.css","ts":1609797269603,"mimetype":"text/css"},"source":""},{"meta":{"name":"sox.dialog.html","url":"https://github.com/soscripted/sox/raw/v2.7.0/sox.dialog.html","ts":1609797269869,"mimetype":"text/html"},"source":"PGRpdiBjbGFzcz0idG9wYmFyLWRpYWxvZyBkbm8iIGlkPSJzb3gtc2V0dGluZ3MtZGlhbG9nIj4KICAgIDxkaXYgY2xhc3M9ImhlYWRlciI+CiAgICAgICAgPGgzPgogICAgICAgICAgICBzb3ggc2V0dGluZ3M8c3BhbiBpZD0ic294LXNldHRpbmdzLWRpYWxvZy12ZXJzaW9uIj4gdjEuMC4zZGV2PC9zcGFuPgogICAgICAgIDwvaDM+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImhlYWRlciI+CiAgICAgICAgPGgzPnNlYXJjaDwvaDM+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImdyaWQtLWNlbGwgcHMtcmVsYXRpdmUgZmwxIG1vZGFsLWNvbnRlbnQiIGlkPSJzZWFyY2gtY29udGFpbmVyIj4KICAgICAgICA8aW5wdXQgY2xhc3M9InMtaW5wdXQgcy1pbnB1dF9fc2VhcmNoIGpzLXNlYXJjaC1maWVsZCIgdHlwZT0idGV4dCIgcGxhY2Vob2xkZXI9Imxvb2tpbmcgZm9yIGEgZmVhdHVyZT8iIGlkPSJzZWFyY2giPgogICAgICAgIDxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiBjbGFzcz0ic3ZnLWljb24gcy1pbnB1dC1pY29uIHMtaW5wdXQtaWNvbl9fc2VhcmNoIGljb25TZWFyY2giIGFyaWEtaGlkZGVuPSJ0cnVlIiB2aWV3Qm94PSIwIDAgMTggMTgiIHdpZHRoPSIxOCIgaGVpZ2h0PSIxOCI+PHBhdGggZD0iTSAxOCAxNi41IGwgLTUuMTQgLTUuMTggaCAtMC4zNSBhIDcgNyAwIDEgMCAtMS4xOSAxLjE5IHYgMC4zNSBMIDE2LjUgMTggbCAxLjUgLTEuNSBaIE0gMTIgNyBBIDUgNSAwIDEgMSAyIDcgYSA1IDUgMCAwIDEgMTAgMCBaIiAvPjwvc3ZnPgogICAgPC9kaXY+CiAgICA8ZGl2IGlkPSJzb3gtc2V0dGluZ3MtZGlhbG9nLWZlYXR1cmVzIj4KICAgICAgICA8ZGl2IGlkPSJzb3gtc2V0dGluZ3MtZGlhbG9nLWZlYXR1cmVzLXBhY2tzIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxoMz5GZWF0dXJlIFBhY2tzPC9oMz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDx1bCBjbGFzcz0ic294LXNldHRpbmdzLWRpYWxvZy1mZWF0dXJlLXBhY2tzLWxpc3QiPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzb3gtc2V0dGluZ3MtZGlhbG9nLWZlYXR1cmUtcGFjayIgZGF0YS1mZWF0dXJlLXBhY2staWQ9Im1ham9yX3VpIj5NYWpvciBVSSB0d2Vha3M8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzb3gtc2V0dGluZ3MtZGlhbG9nLWZlYXR1cmUtcGFjayIgZGF0YS1mZWF0dXJlLXBhY2staWQ9ImtleV9mZWF0dXJlIj5LZXkgZmVhdHVyZXM8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzb3gtc2V0dGluZ3MtZGlhbG9nLWZlYXR1cmUtcGFjayIgZGF0YS1mZWF0dXJlLXBhY2staWQ9InBvd2VyX3VzZXIiPlBvd2VyIFVzZXIgZmVhdHVyZXM8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzb3gtc2V0dGluZ3MtZGlhbG9nLWZlYXR1cmUtcGFjayBjbGVhci1mZWF0dXJlLXBhY2stc2VsZWN0aW9uIj5jbGVhcjwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgaWQ9InNveC1zZXR0aW5ncy1kaWFsb2ctYWN0aW9ucyI+CiAgICAgICAgPGlucHV0IGNsYXNzPSJzLWJ0biBzLWJ0bl9fcHJpbWFyeSBzLWJ0bl9fc20iIGlkPSJzb3gtc2V0dGluZ3MtZGlhbG9nLXNhdmUiIHR5cGU9InN1Ym1pdCIgdmFsdWU9IlNhdmUgQ2hhbmdlcyI+CiAgICAgICAgPGEgY2xhc3M9ImFjdGlvbiBzLWJ0biBzLWJ0bl9fc2Vjb25kYXJ5IHMtYnRuX19zbSIgaWQ9InNveC1zZXR0aW5ncy1kaWFsb2ctcmVzZXQiIHRpdGxlPSJyZXNldCBTT1ggKGRlbGV0ZXMgZXZlcnl0aGluZywgaW5jbHVkaW5nIHlvdXIgc2V0dGluZ3MgYW5kIGFjY2VzcyB0b2tlbikiPlJlc2V0PC9hPgogICAgICAgIDxhIGNsYXNzPSJhY3Rpb24gcy1idG4gcy1idG5fX3NlY29uZGFyeSBzLWJ0bl9fc20iIGlkPSJzb3gtc2V0dGluZ3MtZGlhbG9nLXJlcG9ydCIgdGl0bGU9InJlcG9ydCBpc3N1ZSBvbiBHaXRodWIiIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vc29zY3JpcHRlZC9zb3gvaXNzdWVzL25ldyI+UmVwb3J0IElzc3VlPC9hPgogICAgICAgIDxhIGNsYXNzPSJhY3Rpb24gcy1idG4gcy1idG5fX3NlY29uZGFyeSBzLWJ0bl9fc20iIGlkPSJzb3gtc2V0dGluZ3MtZGlhbG9nLWRlYnVnZ2luZyI+RW5hYmxlIERlYnVnZ2luZzwvYT4KICAgICAgICA8YSBjbGFzcz0iYWN0aW9uIiBpZD0ic294LXNldHRpbmdzLWRpYWxvZy1hY2Nlc3MtdG9rZW4iIHRpdGxlPSJyZXF1ZXN0IGEgbmV3IGFjY2VzcyB0b2tlbiI+CiAgICAgICAgICAgIDxzdmcgcm9sZT0iaW1nIiBjbGFzcz0ic294LXNwcml0ZSBzb3gtc3ByaXRlLWtleSI+IDx1c2UgeGxpbms6aHJlZj0iI3NveF9rZXkiPiA8L3VzZT4gPC9zdmc+CiAgICAgICAgPC9hPgogICAgICAgIDxhIGNsYXNzPSJhY3Rpb24iIGlkPSJzb3gtc2V0dGluZ3MtZXhwb3J0IiB0aXRsZT0iZXhwb3J0L2NvcHkgZmVhdHVyZSBzZXR0aW5ncyI+CiAgICAgICAgICAgIDxzdmcgcm9sZT0iaW1nIiBjbGFzcz0ic294LXNwcml0ZSBzb3gtc3ByaXRlLWV4cG9ydCI+IDx1c2UgeGxpbms6aHJlZj0iI3NveF9leHBvcnQiPiA8L3VzZT4gPC9zdmc+CiAgICAgICAgPC9hPgogICAgICAgIDxhIGNsYXNzPSJhY3Rpb24iIGlkPSJzb3gtc2V0dGluZ3MtaW1wb3J0IiB0aXRsZT0iaW1wb3J0L3Bhc3RlIGZlYXR1cmUgc2V0dGluZ3MiPgogICAgICAgICAgICA8c3ZnIHJvbGU9ImltZyIgY2xhc3M9InNveC1zcHJpdGUgc294LXNwcml0ZS1pbXBvcnQiPiA8dXNlIHhsaW5rOmhyZWY9IiNzb3hfaW1wb3J0Ij4gPC91c2U+IDwvc3ZnPgogICAgICAgIDwvYT4KICAgICAgICA8YSBjbGFzcz0iYWN0aW9uIiBpZD0ic294LXNldHRpbmdzLWRpYWxvZy1jaGVjay10b2dnbGUiIHRpdGxlPSJ0b2dnbGUgYWxsIGZlYXR1cmVzIG9uL29mZiI+CiAgICAgICAgICAgIDxzdmcgcm9sZT0iaW1nIiBjbGFzcz0ic294LXNwcml0ZSBzb3gtc3ByaXRlLWNoZWNrZWQtYm94Ij4gPHVzZSB4bGluazpocmVmPSIjc294X2NoZWNrZWRfYm94Ij4gPC91c2U+IDwvc3ZnPgogICAgICAgIDwvYT4KICAgIDwvZGl2Pgo8L2Rpdj4K"},{"meta":{"name":"sox.features.info.json","url":"https://github.com/soscripted/sox/raw/v2.7.0/sox.features.info.json","ts":1609797269888,"mimetype":"text/plain"},"source":""},{"meta":{"name":"sox.common.info.json","url":"https://github.com/soscripted/sox/raw/v2.7.0/sox.common.info.json","ts":1609797269961,"mimetype":"text/plain"},"source":"ewogICAgInByaXZpbGVnZXMiOiB7CiAgICAgICAgImJldGEiOiB7CiAgICAgICAgICAgICJhY2Nlc3MgcmV2aWV3IHF1ZXVlcyI6IDM1MCwKICAgICAgICAgICAgImFjY2VzcyB0byBtb2RlcmF0b3IgdG9vbHMiOiAyMDAwLAogICAgICAgICAgICAiYXBwcm92ZSB0YWcgd2lraSBlZGl0cyI6IDE1MDAsCiAgICAgICAgICAgICJjYXN0IGNsb3NlIGFuZCByZW9wZW4gdm90ZXMiOiA1MDAsCiAgICAgICAgICAgICJjb21tZW50IGV2ZXJ5d2hlcmUiOiA1MCwKICAgICAgICAgICAgImNyZWF0ZSBjaGF0IHJvb21zIjogMTAwLAogICAgICAgICAgICAiY3JlYXRlIGdhbGxlcnkgY2hhdCByb29tcyI6IDEwMDAsCiAgICAgICAgICAgICJjcmVhdGUgcG9zdHMiOiAxLAogICAgICAgICAgICAiY3JlYXRlIHRhZyBzeW5vbnltcyI6IDEyNTAsCiAgICAgICAgICAgICJjcmVhdGUgdGFncyI6IDE1MCwKICAgICAgICAgICAgImNyZWF0ZSB3aWtpIHBvc3RzIjogMTAsCiAgICAgICAgICAgICJlZGl0IGNvbW11bml0eSB3aWtpIjogMTAwLAogICAgICAgICAgICAiZWRpdCBxdWVzdGlvbnMgYW5kIGFuc3dlcnMiOiAxMDAwLAogICAgICAgICAgICAiZXN0YWJsaXNoZWQgdXNlciI6IDc1MCwKICAgICAgICAgICAgImZsYWcgcG9zdHMiOiAxNSwKICAgICAgICAgICAgInBhcnRpY2lwYXRlIGluIG1ldGEiOiA1LAogICAgICAgICAgICAicHJvdGVjdCBxdWVzdGlvbnMiOiAzNTAwLAogICAgICAgICAgICAicmVtb3ZlIG5ldyB1c2VyIHJlc3RyaWN0aW9ucyI6IDEwLAogICAgICAgICAgICAic2V0IGJvdW50aWVzIjogNzUsCiAgICAgICAgICAgICJ0YWxrIGluIGNoYXQiOiAyMCwKICAgICAgICAgICAgInRydXN0ZWQgdXNlciI6IDQwMDAsCiAgICAgICAgICAgICJ2aWV3IGNsb3NlIHZvdGVzIjogMjUwLAogICAgICAgICAgICAidm90ZSBkb3duIjogMTI1LAogICAgICAgICAgICAidm90ZSB1cCI6IDE1CiAgICAgICAgfSwKICAgICAgICAiZ3JhZHVhdGVkIjogewogICAgICAgICAgICAiYWNjZXNzIHJldmlldyBxdWV1ZXMiOiAyMDAwLAogICAgICAgICAgICAiYWNjZXNzIHRvIG1vZGVyYXRvciB0b29scyI6IDEwMDAwLAogICAgICAgICAgICAiYXBwcm92ZSB0YWcgd2lraSBlZGl0cyI6IDUwMDAsCiAgICAgICAgICAgICJjYXN0IGNsb3NlIGFuZCByZW9wZW4gdm90ZXMiOiAzMDAwLAogICAgICAgICAgICAiY29tbWVudCBldmVyeXdoZXJlIjogNSwKICAgICAgICAgICAgImNyZWF0ZSBjaGF0IHJvb21zIjogMTAwLAogICAgICAgICAgICAiY3JlYXRlIGdhbGxlcnkgY2hhdCByb29tcyI6IDEwMDAsCiAgICAgICAgICAgICJjcmVhdGUgcG9zdHMiOiAxLAogICAgICAgICAgICAiY3JlYXRlIHRhZyBzeW5vbnltcyI6IDI1MDAsCiAgICAgICAgICAgICJjcmVhdGUgdGFncyI6IDUwMCwKICAgICAgICAgICAgImNyZWF0ZSB3aWtpIHBvc3RzIjogMTAsCiAgICAgICAgICAgICJlZGl0IGNvbW11bml0eSB3aWtpIjogMTAwLAogICAgICAgICAgICAiZWRpdCBxdWVzdGlvbnMgYW5kIGFuc3dlcnMiOiAyMDAwLAogICAgICAgICAgICAiZXN0YWJsaXNoZWQgdXNlciI6IDEwMDAsCiAgICAgICAgICAgICJmbGFnIHBvc3RzIjogMTUsCiAgICAgICAgICAgICJwYXJ0aWNpcGF0ZSBpbiBtZXRhIjogNSwKICAgICAgICAgICAgInByb3RlY3QgcXVlc3Rpb25zIjogMTUwMDAsCiAgICAgICAgICAgICJyZWR1Y2UgYWRzIjogMjAwLAogICAgICAgICAgICAicmVtb3ZlIG5ldyB1c2VyIHJlc3RyaWN0aW9ucyI6IDEwLAogICAgICAgICAgICAic2V0IGJvdW50aWVzIjogNzUsCiAgICAgICAgICAgICJ0YWxrIGluIGNoYXQiOiAyMCwKICAgICAgICAgICAgInRydXN0ZWQgdXNlciI6IDIwMDAwLAogICAgICAgICAgICAidmlldyBjbG9zZSB2b3RlcyI6IDI1MCwKICAgICAgICAgICAgInZvdGUgZG93biI6IDEyNSwKICAgICAgICAgICAgInZvdGUgdXAiOiAxNQogICAgICAgIH0KICAgIH0KfQo="},{"meta":{"name":"sox.sprites.svg","url":"https://github.com/soscripted/sox/raw/v2.7.0/sox.sprites.svg","ts":1609797269968,"mimetype":"text/plain"},"source":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciPgo8c3ltYm9sIGlkPSJzb3hfYWNjZXNzX3RpbWUiIHZpZXdCb3g9IjAgMCAxOCAxOCIgZmlsbD0idmFyKC0tYmxhY2stNjAwKSI+PHBhdGggZD0iTSA5IDE3IEEgOCA4IDAgMSAxIDkgMSBhIDggOCAwIDAgMSAwIDE2IFogbSAwIC0yIEEgNiA2IDAgMSAwIDkgMyBhIDYgNiAwIDAgMCAwIDEyIFogTSA4IDUgaCAxLjAxIEwgOSA5LjM2IGwgMy4yMiAyLjEgbCAtMC42IDAuOTMgTCA4IDEwIFYgNSBaIiAvPgo8L3N5bWJvbD4KPHN5bWJvbCBpZD0ic294X2NoZWNrZWRfYm94IiB2aWV3Qm94PSIwIDAgMjQgMjQiIGZpbGw9InZhcigtLWJsYWNrLTkwMCkiPjxwYXRoIGQ9Ik0wIDBoMjR2MjRIMHoiIGZpbGw9Im5vbmUiLz48cGF0aCBkPSJNMTkgM0g1Yy0xLjExIDAtMiAuOS0yIDJ2MTRjMCAxLjEuODkgMiAyIDJoMTRjMS4xMSAwIDItLjkgMi0yVjVjMC0xLjEtLjg5LTItMi0yem0tOSAxNGwtNS01IDEuNDEtMS40MUwxMCAxNC4xN2w3LjU5LTcuNTlMMTkgOGwtOSA5eiIvPgo8L3N5bWJvbD4KPHN5bWJvbCBpZD0ic294X2NoZXZyb25fbGVmdCIgdmlld0JveD0iMCAwIDI0IDI0IiBmaWxsPSJ2YXIoLS1ibGFjay05MDApIj48cGF0aCBkPSJNMTUuNDEgNy40MUwxNCA2bC02IDYgNiA2IDEuNDEtMS40MUwxMC44MyAxMnoiLz48cGF0aCBkPSJNMCAwaDI0djI0SDB6IiBmaWxsPSJub25lIi8+Cjwvc3ltYm9sPgo8c3ltYm9sIGlkPSJzb3hfY2hldnJvbl9yaWdodCIgdmlld0JveD0iMCAwIDI0IDI0IiBmaWxsPSJ2YXIoLS1ibGFjay05MDApIj48cGF0aCBkPSJNMTAgNkw4LjU5IDcuNDEgMTMuMTcgMTJsLTQuNTggNC41OUwxMCAxOGw2LTZ6Ii8+PHBhdGggZD0iTTAgMGgyNHYyNEgweiIgZmlsbD0ibm9uZSIvPgo8L3N5bWJvbD4KPHN5bWJvbCBpZD0ic294X2NvcHkiIHZpZXdCb3g9IjAgMCAyNCAyNCIgZmlsbD0idmFyKC0tYmxhY2stNjAwKSI+PHBhdGggZmlsbD0ibm9uZSIgZD0iTTAgMGgyNHYyNEgweiIvPjxwYXRoIGQ9Ik0xNiAxSDRjLTEuMSAwLTIgLjktMiAydjE0aDJWM2gxMlYxem0tMSA0bDYgNnYxMGMwIDEuMS0uOSAyLTIgMkg3Ljk5QzYuODkgMjMgNiAyMi4xIDYgMjFsLjAxLTE0YzAtMS4xLjg5LTIgMS45OS0yaDd6bS0xIDdoNS41TDE0IDYuNVYxMnoiLz4KPC9zeW1ib2w+CjxzeW1ib2wgaWQ9InNveF9leHBvcnQiIHZpZXdCb3g9IjAgMCAyNCAyNCIgZmlsbD0idmFyKC0tYmxhY2stOTAwKSI+PHBhdGggZD0iTTAgMGgyNHYyNEgweiIgZmlsbD0ibm9uZSIvPjxwYXRoIGQ9Ik0xMC4wOSAxNS41OUwxMS41IDE3bDUtNS01LTUtMS40MSAxLjQxTDEyLjY3IDExSDN2Mmg5LjY3bC0yLjU4IDIuNTl6TTE5IDNINWMtMS4xMSAwLTIgLjktMiAydjRoMlY1aDE0djE0SDV2LTRIM3Y0YzAgMS4xLjg5IDIgMiAyaDE0YzEuMSAwIDItLjkgMi0yVjVjMC0xLjEtLjktMi0yLTJ6Ii8+Cjwvc3ltYm9sPgo8c3ltYm9sIGlkPSJzb3hfaG90IiB2aWV3Qm94PSIwIDAgMjQgMjQiPjxwYXRoIGQ9Ik0xMy41LjY3cy43NCAyLjY1Ljc0IDQuOGMwIDIuMDYtMS4zNSAzLjczLTMuNDEgMy43My0yLjA3IDAtMy42My0xLjY3LTMuNjMtMy43M2wuMDMtLjM2QzUuMjEgNy41MSA0IDEwLjYyIDQgMTRjMCA0LjQyIDMuNTggOCA4IDhzOC0zLjU4IDgtOEMyMCA4LjYxIDE3LjQxIDMuOCAxMy41LjY3ek0xMS43MSAxOWMtMS43OCAwLTMuMjItMS40LTMuMjItMy4xNCAwLTEuNjIgMS4wNS0yLjc2IDIuODEtMy4xMiAxLjc3LS4zNiAzLjYtMS4yMSA0LjYyLTIuNTguMzkgMS4yOS41OSAyLjY1LjU5IDQuMDQgMCAyLjY1LTIuMTUgNC44LTQuOCA0Ljh6Ii8+PHBhdGggZD0iTTAgMGgyNHYyNEgweiIgZmlsbD0ibm9uZSIvPgo8L3N5bWJvbD4KPHN5bWJvbCBpZD0ic294X2ltcG9ydCIgdmlld0JveD0iMCAwIDI0IDI0IiBmaWxsPSJ2YXIoLS1ibGFjay05MDApIj48cGF0aCBkPSJNMCAwaDI0djI0SDB6IiBmaWxsPSJub25lIi8+PHBhdGggZD0iTTIxIDMuMDFIM2MtMS4xIDAtMiAuOS0yIDJWOWgyVjQuOTloMTh2MTQuMDNIM1YxNUgxdjQuMDFjMCAxLjEuOSAxLjk4IDIgMS45OGgxOGMxLjEgMCAyLS44OCAyLTEuOTh2LTE0YzAtMS4xMS0uOS0yLTItMnpNMTEgMTZsNC00LTQtNHYzSDF2MmgxMHYzeiIvPgo8L3N5bWJvbD4KPHN5bWJvbCBpZD0ic294X2luZm8iIHZpZXdCb3g9IjAgMCAyNCAyNCIgZmlsbD0idmFyKC0tYmxhY2stNjAwKSI+PHBhdGggZD0iTTAgMGgyNHYyNEgweiIgZmlsbD0ibm9uZSIvPjxwYXRoIGQ9Ik0xMiAyQzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyem0xIDE1aC0ydi02aDJ2NnptMC04aC0yVjdoMnYyeiIvPgo8L3N5bWJvbD4KPHN5bWJvbCBpZD0ic294X2tleSIgdmlld0JveD0iMCAwIDI0IDI0IiBmaWxsPSJ2YXIoLS1ibGFjay05MDApIj48cGF0aCBkPSJNMCAwaDI0djI0SDB6IiBmaWxsPSJub25lIi8+PHBhdGggZD0iTTEyLjY1IDEwQzExLjgzIDcuNjcgOS42MSA2IDcgNmMtMy4zMSAwLTYgMi42OS02IDZzMi42OSA2IDYgNmMyLjYxIDAgNC44My0xLjY3IDUuNjUtNEgxN3Y0aDR2LTRoMnYtNEgxMi42NXpNNyAxNGMtMS4xIDAtMi0uOS0yLTJzLjktMiAyLTIgMiAuOSAyIDItLjkgMi0yIDJ6Ii8+Cjwvc3ltYm9sPgo8c3ltYm9sIGlkPSJzb3hfbGF1bmNoIiB2aWV3Qm94PSIwIDAgMjQgMjQiPjxwYXRoIGQ9Ik0wIDBoMjR2MjRIMHoiIGZpbGw9Im5vbmUiLz48cGF0aCBkPSJNMTkgMTlINVY1aDdWM0g1Yy0xLjExIDAtMiAuOS0yIDJ2MTRjMCAxLjEuODkgMiAyIDJoMTRjMS4xIDAgMi0uOSAyLTJ2LTdoLTJ2N3pNMTQgM3YyaDMuNTlsLTkuODMgOS44MyAxLjQxIDEuNDFMMTkgNi40MVYxMGgyVjNoLTd6Ii8+Cjwvc3ltYm9sPgo8c3ltYm9sIGlkPSJzb3hfc2VhcmNoIiB2aWV3Qm94PSIwIDAgMjQgMjQiPjxwYXRoIGQ9Ik0xNS41IDE0aC0uNzlsLS4yOC0uMjdDMTUuNDEgMTIuNTkgMTYgMTEuMTEgMTYgOS41IDE2IDUuOTEgMTMuMDkgMyA5LjUgM1MzIDUuOTEgMyA5LjUgNS45MSAxNiA5LjUgMTZjMS42MSAwIDMuMDktLjU5IDQuMjMtMS41N2wuMjcuMjh2Ljc5bDUgNC45OUwyMC40OSAxOWwtNC45OS01em0tNiAwQzcuMDEgMTQgNSAxMS45OSA1IDkuNVM3LjAxIDUgOS41IDUgMTQgNy4wMSAxNCA5LjUgMTEuOTkgMTQgOS41IDE0eiIvPjxwYXRoIGQ9Ik0wIDBoMjR2MjRIMHoiIGZpbGw9Im5vbmUiLz4KPC9zeW1ib2w+CjxzeW1ib2wgaWQ9InNveF9zZXR0aW5ncyIgdmlld0JveD0iMCAwIDIwIDIwIj48cGF0aCBmaWxsPSJub25lIiBkPSJNMCAwaDIwdjIwSDBWMHoiLz48cGF0aCBkPSJNMTUuOTUgMTAuNzhjLjAzLS4yNS4wNS0uNTEuMDUtLjc4cy0uMDItLjUzLS4wNi0uNzhsMS42OS0xLjMyYy4xNS0uMTIuMTktLjM0LjEtLjUxbC0xLjYtMi43N2MtLjEtLjE4LS4zMS0uMjQtLjQ5LS4xOGwtMS45OS44Yy0uNDItLjMyLS44Ni0uNTgtMS4zNS0uNzhMMTIgMi4zNGMtLjAzLS4yLS4yLS4zNC0uNC0uMzRIOC40Yy0uMiAwLS4zNi4xNC0uMzkuMzRsLS4zIDIuMTJjLS40OS4yLS45NC40Ny0xLjM1Ljc4bC0xLjk5LS44Yy0uMTgtLjA3LS4zOSAwLS40OS4xOGwtMS42IDIuNzdjLS4xLjE4LS4wNi4zOS4xLjUxbDEuNjkgMS4zMmMtLjA0LjI1LS4wNy41Mi0uMDcuNzhzLjAyLjUzLjA2Ljc4TDIuMzcgMTIuMWMtLjE1LjEyLS4xOS4zNC0uMS41MWwxLjYgMi43N2MuMS4xOC4zMS4yNC40OS4xOGwxLjk5LS44Yy40Mi4zMi44Ni41OCAxLjM1Ljc4bC4zIDIuMTJjLjA0LjIuMi4zNC40LjM0aDMuMmMuMiAwIC4zNy0uMTQuMzktLjM0bC4zLTIuMTJjLjQ5LS4yLjk0LS40NyAxLjM1LS43OGwxLjk5LjhjLjE4LjA3LjM5IDAgLjQ5LS4xOGwxLjYtMi43N2MuMS0uMTguMDYtLjM5LS4xLS41MWwtMS42Ny0xLjMyek0xMCAxM2MtMS42NSAwLTMtMS4zNS0zLTNzMS4zNS0zIDMtMyAzIDEuMzUgMyAzLTEuMzUgMy0zIDN6Ii8+Cjwvc3ltYm9sPgo8c3ltYm9sIGlkPSJzb3hfdG9nZ2xlX29mZiIgdmlld0JveD0iMCAwIDI0IDI0Ij48cGF0aCBkPSJNMTcgN0g3Yy0yLjc2IDAtNSAyLjI0LTUgNXMyLjI0IDUgNSA1aDEwYzIuNzYgMCA1LTIuMjQgNS01cy0yLjI0LTUtNS01ek03IDE1Yy0xLjY2IDAtMy0xLjM0LTMtM3MxLjM0LTMgMy0zIDMgMS4zNCAzIDMtMS4zNCAzLTMgM3oiLz48cGF0aCBmaWxsPSJub25lIiBkPSJNMCAwaDI0djI0SDB6Ii8+Cjwvc3ltYm9sPgo8c3ltYm9sIGlkPSJzb3hfdG9nZ2xlX29uIiB2aWV3Qm94PSIwIDAgMjQgMjQiPjxwYXRoIGQ9Ik0xNyA3SDdjLTIuNzYgMC01IDIuMjQtNSA1czIuMjQgNSA1IDVoMTBjMi43NiAwIDUtMi4yNCA1LTVzLTIuMjQtNS01LTV6bTAgOGMtMS42NiAwLTMtMS4zNC0zLTNzMS4zNC0zIDMtMyAzIDEuMzQgMyAzLTEuMzQgMy0zIDN6Ii8+PHBhdGggZmlsbD0ibm9uZSIgZD0iTTAgMGgyNHYyNEgweiIvPgo8L3N5bWJvbD4KPHN5bWJvbCBpZD0ic294X3RvcCIgdmlld0JveD0iMCAwIDI0IDI0Ij48cGF0aCBkPSJNOCAxMWgzdjEwaDJWMTFoM2wtNC00LTQgNHpNNCAzdjJoMTZWM0g0eiIvPjxwYXRoIGQ9Ik0wIDBoMjR2MjRIMHoiIGZpbGw9Im5vbmUiLz4KPC9zeW1ib2w+CjxzeW1ib2wgaWQ9InNveF91bmNoZWNrZWRfYm94IiB2aWV3Qm94PSIwIDAgMjQgMjQiPjxwYXRoIGQ9Ik0xOSA1djE0SDVWNWgxNG0wLTJINWMtMS4xIDAtMiAuOS0yIDJ2MTRjMCAxLjEuOSAyIDIgMmgxNGMxLjEgMCAyLS45IDItMlY1YzAtMS4xLS45LTItMi0yeiIvPjxwYXRoIGQ9Ik0wIDBoMjR2MjRIMHoiIGZpbGw9Im5vbmUiLz4KPC9zeW1ib2w+CjxzeW1ib2wgaWQ9InNveF93cmVuY2giIHZpZXdCb3g9IjAgMCAyNCAyNCIgZmlsbD0idmFyKC0tYmxhY2stOTAwKSI+PHBhdGggZmlsbD0ibm9uZSIgY2xpcC1ydWxlPSJldmVub2RkIiBkPSJNMCAwaDI0djI0SDB6Ii8+PHBhdGggZD0iTTIyLjcgMTlsLTkuMS05LjFjLjktMi4zLjQtNS0xLjUtNi45LTItMi01LTIuNC03LjQtMS4zTDkgNiA2IDkgMS42IDQuN0MuNCA3LjEuOSAxMC4xIDIuOSAxMi4xYzEuOSAxLjkgNC42IDIuNCA2LjkgMS41bDkuMSA5LjFjLjQuNCAxIC40IDEuNCAwbDIuMy0yLjNjLjUtLjQuNS0xLjEuMS0xLjR6Ii8+Cjwvc3ltYm9sPjwvc3ZnPgo="}],"requires":[{"meta":{"name":"jquery-3.3.1.min.js","url":"https://code.jquery.com/jquery-3.3.1.min.js","ts":1609797275329,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"jquery-ui.min.js","url":"https://code.jquery.com/ui/1.12.1/jquery-ui.min.js","ts":1609797275367,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"all.js","url":"https://api.stackexchange.com/js/2.0/all.js","ts":1609797271098,"mimetype":"text/javascript"},"source":"d2luZG93LlNFPWZ1bmN0aW9uKGUpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiB0KGUsdCl7dmFyIHI9ZVt0XTtpZighcil0aHJvdyB0KyIgcmVxdWlyZWQiO3JldHVybiByfWZ1bmN0aW9uIHIoZSl7aWYoIWUpdGhyb3cgZzt2YXIgcj10KGUsImNsaWVudElkIiksbz10KGUsImNoYW5uZWxVcmwiKSxuPXQoZSwiY29tcGxldGUiKSxkPXdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCx3PWQuc3Vic3RyaW5nKDAsZC5sZW5ndGgtMSksdT0oZCsiLy8iK3dpbmRvdy5sb2NhdGlvbi5ob3N0KS50b0xvd2VyQ2FzZSgpO2lmKGM9dChlLCJrZXkiKSxpPXIsYT1vLDAhPT1hLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih1KSl0aHJvdyJjaGFubmVsVXJsIG11c3QgYmUgdW5kZXIgdGhlIGN1cnJlbnQgZG9tYWluIjtzPWgrIi9vYXV0aC9kaWFsb2c/cmVkaXJlY3RfdXJpPSIrbChoKyIvb2F1dGgvbG9naW5fc3VjY2Vzcz9hc3Npc3RlZD0iK3IrIiZwcm90b2NvbD0iK3crIiZwcm94eT0iK2woYSkpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtuKHsidmVyc2lvbiI6IjM3NjAwIn0pfSl9ZnVuY3Rpb24gbyh0LHIsbyxuKXtmb3IodmFyIGkscz0ic2VjIit1KyssYT1tLGQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHdpbmRvd1tzXT1lLGkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpKSxhLmVycm9yX2lkPyhuKHsiZXJyb3JOYW1lIjphLmVycm9yX25hbWUsImVycm9yTWVzc2FnZSI6YS5lcnJvcl9tZXNzYWdlfSksdm9pZCAwKToobyh7ImFjY2Vzc1Rva2VuIjp0LCJleHBpcmF0aW9uRGF0ZSI6ciwibmV0d29ya1VzZXJzIjphLml0ZW1zfSksdm9pZCAwKX07d2luZG93W3NdfHx3LmdldEVsZW1lbnRCeUlkKHMpOylzPSJzZWMiK3UrKzt3aW5kb3dbc109ZCxhKz0iP3BhZ2VzaXplPTEwMCZhY2Nlc3NfdG9rZW49IitsKHQpKyIma2V5PSIrbChjKSsiJmNhbGxiYWNrPSIrbChzKSxpPXcuY3JlYXRlRWxlbWVudCgic2NyaXB0IiksaS50eXBlPSJ0ZXh0L2phdmFzY3JpcHQiLGkuc3JjPWEsaS5pZD1zLHcuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImhlYWQiKVswXS5hcHBlbmRDaGlsZChpKX1mdW5jdGlvbiBuKGUpe2lmKCFlKXRocm93IGc7dmFyIHIsbixhLGMsdyxtPXQoZSwic3VjY2VzcyIpLGY9ZS5zY29wZSx2PSIiLGs9dSsrLHg9cysiJmNsaWVudF9pZD0iK2krIiZzdGF0ZT0iK2sseT1lLmVycm9yO2lmKGYmJiJbb2JqZWN0IEFycmF5XSIhPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZikpdGhyb3cic2NvcGUgbXVzdCBiZSBhbiBBcnJheSI7ZiYmKHY9Zi5qb2luKCIgIikpLHYubGVuZ3RoPjAmJih4Kz0iJnNjb3BlPSIrbCh2KSksYz1mdW5jdGlvbih0KXtpZih0Lm9yaWdpbj09PWgmJnQuc291cmNlPT09YSl7dmFyIG4saSxzLGQsdz10LmRhdGEuc3Vic3RyaW5nKDEpLnNwbGl0KCImIiksbD17fTtmb3Iocz0wO3M8dy5sZW5ndGg7cysrKWQ9d1tzXS5zcGxpdCgiPSIpLGxbZFswXV09ZFsxXTtpZigrbC5zdGF0ZT09PWspcmV0dXJuIHImJndpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCJtZXNzYWdlIixjKSxhLmNsb3NlKCksKGk9bC5hY2Nlc3NfdG9rZW4pPyhuPWwuZXhwaXJlcyxuJiYobj1uZXcgRGF0ZSgobmV3IERhdGUpLmdldFRpbWUoKSsxZTMqbikpLGUubmV0d29ya1VzZXJzP28oaSxuLG0seSk6bSh7ImFjY2Vzc1Rva2VuIjppLCJleHBpcmF0aW9uRGF0ZSI6bn0pLHZvaWQgMCk6KHkmJnkoeyJlcnJvck5hbWUiOmwuZXJyb3IsImVycm9yTWVzc2FnZSI6bC5lcnJvcl9kZXNjcmlwdGlvbn0pLHZvaWQgMCl9fSwhd2luZG93LnBvc3RNZXNzYWdlfHwhd2luZG93LmFkZEV2ZW50TGlzdGVuZXJ8fCgvTVNJRSAoXGQrXC5cZCspLy5leGVjKGQpfHxbXSlbMV08PTk/KG49ZnVuY3Rpb24oKXtpZihhKXtpZihhLmNsb3NlZClyZXR1cm4gY2xlYXJJbnRlcnZhbCh3KSx2b2lkIDA7dmFyIGU9YS5mcmFtZXNbInNlLWFwaS1mcmFtZSJdO2UmJihjbGVhckludGVydmFsKHcpLGMoeyJvcmlnaW4iOmgsInNvdXJjZSI6YSwiZGF0YSI6ZS5sb2NhdGlvbi5oYXNofSkpfX0sdz1zZXRJbnRlcnZhbChuLDUwKSk6KHI9ITAsd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLGMpKSxhPXdpbmRvdy5vcGVuKHgscCwid2lkdGg9NjYwLGhlaWdodD00ODAiKX12YXIgaSxzLGEsYyxkPXdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LHc9d2luZG93LmRvY3VtZW50LGw9d2luZG93LmVuY29kZVVSSUNvbXBvbmVudCx1PTEscD0ic2V3Iit1KyssaD0iaHR0cHM6Ly9zdGFja2V4Y2hhbmdlLmNvbSIsbT0iaHR0cHM6Ly9hcGkuc3RhY2tleGNoYW5nZS5jb20vMi4wL21lL2Fzc29jaWF0ZWQiLGc9Im11c3QgcGFzcyBhbiBvYmplY3QiO3JldHVybnsiYXV0aGVudGljYXRlIjpuLCJpbml0IjpyfX0oKTs="},{"meta":{"name":"jquery.timeago.min.js","url":"https://cdnjs.cloudflare.com/ajax/libs/jquery-timeago/1.5.3/jquery.timeago.min.js","ts":1609797270313,"mimetype":"text/javascript"},"source":"IWZ1bmN0aW9uKHQpeyJmdW5jdGlvbiI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFsianF1ZXJ5Il0sdCk6dCgib2JqZWN0Ij09dHlwZW9mIG1vZHVsZSYmIm9iamVjdCI9PXR5cGVvZiBtb2R1bGUuZXhwb3J0cz9yZXF1aXJlKCJqcXVlcnkiKTpqUXVlcnkpfShmdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7dmFyIGU9ci5zZXR0aW5ncztpZihlLmF1dG9EaXNwb3NlJiYhdC5jb250YWlucyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsdGhpcykpcmV0dXJuIHQodGhpcykudGltZWFnbygiZGlzcG9zZSIpLHRoaXM7dmFyIG89aSh0aGlzKTtyZXR1cm4gaXNOYU4oby5kYXRldGltZSl8fCgwPT1lLmN1dG9mZnx8TWF0aC5hYnMobihvLmRhdGV0aW1lKSk8ZS5jdXRvZmY/dCh0aGlzKS50ZXh0KGEoby5kYXRldGltZSkpOnQodGhpcykuYXR0cigidGl0bGUiKS5sZW5ndGg+MCYmdCh0aGlzKS50ZXh0KHQodGhpcykuYXR0cigidGl0bGUiKSkpLHRoaXN9ZnVuY3Rpb24gaShlKXtpZihlPXQoZSksIWUuZGF0YSgidGltZWFnbyIpKXtlLmRhdGEoInRpbWVhZ28iLHtkYXRldGltZTpyLmRhdGV0aW1lKGUpfSk7dmFyIGk9dC50cmltKGUudGV4dCgpKTtyLnNldHRpbmdzLmxvY2FsZVRpdGxlP2UuYXR0cigidGl0bGUiLGUuZGF0YSgidGltZWFnbyIpLmRhdGV0aW1lLnRvTG9jYWxlU3RyaW5nKCkpOiEoaS5sZW5ndGg+MCl8fHIuaXNUaW1lKGUpJiZlLmF0dHIoInRpdGxlIil8fGUuYXR0cigidGl0bGUiLGkpfXJldHVybiBlLmRhdGEoInRpbWVhZ28iKX1mdW5jdGlvbiBhKHQpe3JldHVybiByLmluV29yZHMobih0KSl9ZnVuY3Rpb24gbih0KXtyZXR1cm4obmV3IERhdGUpLmdldFRpbWUoKS10LmdldFRpbWUoKX10LnRpbWVhZ289ZnVuY3Rpb24oZSl7cmV0dXJuIGEoZSBpbnN0YW5jZW9mIERhdGU/ZToic3RyaW5nIj09dHlwZW9mIGU/dC50aW1lYWdvLnBhcnNlKGUpOiJudW1iZXIiPT10eXBlb2YgZT9uZXcgRGF0ZShlKTp0LnRpbWVhZ28uZGF0ZXRpbWUoZSkpfTt2YXIgcj10LnRpbWVhZ287dC5leHRlbmQodC50aW1lYWdvLHtzZXR0aW5nczp7cmVmcmVzaE1pbGxpczo2ZTQsYWxsb3dQYXN0OiEwLGFsbG93RnV0dXJlOiExLGxvY2FsZVRpdGxlOiExLGN1dG9mZjowLGF1dG9EaXNwb3NlOiEwLHN0cmluZ3M6e3ByZWZpeEFnbzpudWxsLHByZWZpeEZyb21Ob3c6bnVsbCxzdWZmaXhBZ286ImFnbyIsc3VmZml4RnJvbU5vdzoiZnJvbSBub3ciLGluUGFzdDoiYW55IG1vbWVudCBub3ciLHNlY29uZHM6Imxlc3MgdGhhbiBhIG1pbnV0ZSIsbWludXRlOiJhYm91dCBhIG1pbnV0ZSIsbWludXRlczoiJWQgbWludXRlcyIsaG91cjoiYWJvdXQgYW4gaG91ciIsaG91cnM6ImFib3V0ICVkIGhvdXJzIixkYXk6ImEgZGF5IixkYXlzOiIlZCBkYXlzIixtb250aDoiYWJvdXQgYSBtb250aCIsbW9udGhzOiIlZCBtb250aHMiLHllYXI6ImFib3V0IGEgeWVhciIseWVhcnM6IiVkIHllYXJzIix3b3JkU2VwYXJhdG9yOiIgIixudW1iZXJzOltdfX0saW5Xb3JkczpmdW5jdGlvbihlKXtmdW5jdGlvbiBpKGksbil7dmFyIHI9dC5pc0Z1bmN0aW9uKGkpP2kobixlKTppLG89YS5udW1iZXJzJiZhLm51bWJlcnNbbl18fG47cmV0dXJuIHIucmVwbGFjZSgvJWQvaSxvKX1pZighdGhpcy5zZXR0aW5ncy5hbGxvd1Bhc3QmJiF0aGlzLnNldHRpbmdzLmFsbG93RnV0dXJlKXRocm93InRpbWVhZ28gYWxsb3dQYXN0IGFuZCBhbGxvd0Z1dHVyZSBzZXR0aW5ncyBjYW4gbm90IGJvdGggYmUgc2V0IHRvIGZhbHNlLiI7dmFyIGE9dGhpcy5zZXR0aW5ncy5zdHJpbmdzLG49YS5wcmVmaXhBZ28scj1hLnN1ZmZpeEFnbztpZih0aGlzLnNldHRpbmdzLmFsbG93RnV0dXJlJiYwPmUmJihuPWEucHJlZml4RnJvbU5vdyxyPWEuc3VmZml4RnJvbU5vdyksIXRoaXMuc2V0dGluZ3MuYWxsb3dQYXN0JiZlPj0wKXJldHVybiB0aGlzLnNldHRpbmdzLnN0cmluZ3MuaW5QYXN0O3ZhciBvPU1hdGguYWJzKGUpLzFlMyxzPW8vNjAsdT1zLzYwLG09dS8yNCxsPW0vMzY1LGQ9NDU+byYmaShhLnNlY29uZHMsTWF0aC5yb3VuZChvKSl8fDkwPm8mJmkoYS5taW51dGUsMSl8fDQ1PnMmJmkoYS5taW51dGVzLE1hdGgucm91bmQocykpfHw5MD5zJiZpKGEuaG91ciwxKXx8MjQ+dSYmaShhLmhvdXJzLE1hdGgucm91bmQodSkpfHw0Mj51JiZpKGEuZGF5LDEpfHwzMD5tJiZpKGEuZGF5cyxNYXRoLnJvdW5kKG0pKXx8NDU+bSYmaShhLm1vbnRoLDEpfHwzNjU+bSYmaShhLm1vbnRocyxNYXRoLnJvdW5kKG0vMzApKXx8MS41PmwmJmkoYS55ZWFyLDEpfHxpKGEueWVhcnMsTWF0aC5yb3VuZChsKSksaD1hLndvcmRTZXBhcmF0b3J8fCIiO3JldHVybiB2b2lkIDA9PT1hLndvcmRTZXBhcmF0b3ImJihoPSIgIiksdC50cmltKFtuLGQscl0uam9pbihoKSl9LHBhcnNlOmZ1bmN0aW9uKGUpe3ZhciBpPXQudHJpbShlKTtyZXR1cm4gaT1pLnJlcGxhY2UoL1wuXGQrLywiIiksaT1pLnJlcGxhY2UoLy0vLCIvIikucmVwbGFjZSgvLS8sIi8iKSxpPWkucmVwbGFjZSgvVC8sIiAiKS5yZXBsYWNlKC9aLywiIFVUQyIpLGk9aS5yZXBsYWNlKC8oW1wrXC1dXGRcZClcOj8oXGRcZCkvLCIgJDEkMiIpLGk9aS5yZXBsYWNlKC8oW1wrXC1dXGRcZCkkLywiICQxMDAiKSxuZXcgRGF0ZShpKX0sZGF0ZXRpbWU6ZnVuY3Rpb24oZSl7dmFyIGk9ci5pc1RpbWUoZSk/dChlKS5hdHRyKCJkYXRldGltZSIpOnQoZSkuYXR0cigidGl0bGUiKTtyZXR1cm4gci5wYXJzZShpKX0saXNUaW1lOmZ1bmN0aW9uKGUpe3JldHVybiJ0aW1lIj09PXQoZSkuZ2V0KDApLnRhZ05hbWUudG9Mb3dlckNhc2UoKX19KTt2YXIgbz17aW5pdDpmdW5jdGlvbigpe3ZhciBpPXQucHJveHkoZSx0aGlzKTtpKCk7dmFyIGE9ci5zZXR0aW5nczthLnJlZnJlc2hNaWxsaXM+MCYmKHRoaXMuX3RpbWVhZ29JbnRlcnZhbD1zZXRJbnRlcnZhbChpLGEucmVmcmVzaE1pbGxpcykpfSx1cGRhdGU6ZnVuY3Rpb24oaSl7dmFyIGE9aSBpbnN0YW5jZW9mIERhdGU/aTpyLnBhcnNlKGkpO3QodGhpcykuZGF0YSgidGltZWFnbyIse2RhdGV0aW1lOmF9KSxyLnNldHRpbmdzLmxvY2FsZVRpdGxlJiZ0KHRoaXMpLmF0dHIoInRpdGxlIixhLnRvTG9jYWxlU3RyaW5nKCkpLGUuYXBwbHkodGhpcyl9LHVwZGF0ZUZyb21ET006ZnVuY3Rpb24oKXt0KHRoaXMpLmRhdGEoInRpbWVhZ28iLHtkYXRldGltZTpyLnBhcnNlKHIuaXNUaW1lKHRoaXMpP3QodGhpcykuYXR0cigiZGF0ZXRpbWUiKTp0KHRoaXMpLmF0dHIoInRpdGxlIikpfSksZS5hcHBseSh0aGlzKX0sZGlzcG9zZTpmdW5jdGlvbigpe3RoaXMuX3RpbWVhZ29JbnRlcnZhbCYmKHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuX3RpbWVhZ29JbnRlcnZhbCksdGhpcy5fdGltZWFnb0ludGVydmFsPW51bGwpfX07dC5mbi50aW1lYWdvPWZ1bmN0aW9uKHQsZSl7dmFyIGk9dD9vW3RdOm8uaW5pdDtpZighaSl0aHJvdyBuZXcgRXJyb3IoIlVua25vd24gZnVuY3Rpb24gbmFtZSAnIit0KyInIGZvciB0aW1lYWdvIik7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2kuY2FsbCh0aGlzLGUpfSksdGhpc30sZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYWJiciIpLGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRpbWUiKX0pOwovLyMgc291cmNlTWFwcGluZ1VSTD1qcXVlcnkudGltZWFnby5taW4uanMubWFw"},{"meta":{"name":"sox.common.js","url":"https://github.com/soscripted/sox/raw/v2.7.0/sox.common.js","ts":1609797270614,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"sox.github.js","url":"https://github.com/soscripted/sox/raw/v2.7.0/sox.github.js","ts":1609797270672,"mimetype":"text/javascript"},"source":"KGZ1bmN0aW9uKHNveCwgJCkgewogICd1c2Ugc3RyaWN0JzsKCiAgc294LmdpdGh1YiA9IHsKICAgIGluaXQ6IGZ1bmN0aW9uKHZlcnNpb24sIGhhbmRsZXIpIHsKICAgICAgLy8gYXV0by1pbmplY3QgdmVyc2lvbiBudW1iZXIgYW5kIGVudmlyb25tZW50IGluZm9ybWF0aW9uIGludG8gR2l0SHViIGlzc3VlcwogICAgICBmdW5jdGlvbiBpbmplY3QoKSB7CiAgICAgICAgaWYgKCFzb3gubG9jYXRpb24ub24oJ2dpdGh1Yi5jb20vc29zY3JpcHRlZC9zb3gnKSB8fCBsb2NhdGlvbi5ocmVmLmluY2x1ZGVzKCdmZWF0dXJlX3JlcXVlc3QnKSkgcmV0dXJuOwogICAgICAgIGNvbnN0ICRpc3N1ZSA9ICQoJyNpc3N1ZV9ib2R5Jyk7CiAgICAgICAgaWYgKCRpc3N1ZS5sZW5ndGgpIHsKICAgICAgICAgICRpc3N1ZS5wcm9wKCdkaXNhYmxlZCcsICd0cnVlJyk7CiAgICAgICAgICBjb25zdCBlbnZpcm9ubWVudFRleHQgPSBgCioqRW52aXJvbm1lbnQqKgpTT1ggdmVyc2lvbjogJHt2ZXJzaW9ufQpQbGF0Zm9ybTogJHtoYW5kbGVyfQpgOwoKICAgICAgICAgIGxldCBpc3N1ZVRleHQgPSAkaXNzdWUudGV4dCgpOwogICAgICAgICAgaXNzdWVUZXh0ID0gaXNzdWVUZXh0LnJlcGxhY2UoJyoqRW52aXJvbm1lbnQqKicsIGVudmlyb25tZW50VGV4dCk7IC8vaW5qZWN0IGVudmlyb25tZW50IGRldGFpbHMKICAgICAgICAgIGlzc3VlVGV4dCArPSAnXG4tLS1cblxuIyMjIEZlYXR1cmVzIEVuYWJsZWQgXG5cbiAgICAnICsgSlNPTi5zdHJpbmdpZnkoc294LnNldHRpbmdzLmxvYWQoKSk7CiAgICAgICAgICAkKCcjaXNzdWVfYm9keScpLmRlbGF5KDUwMCkudGV4dChpc3N1ZVRleHQpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7CiAgICAgICAgfQogICAgICB9CgogICAgICAkKGRvY3VtZW50KS5vbigncGpheDpjb21wbGV0ZScsIGluamVjdCk7CiAgICAgIGluamVjdCgpOwogICAgfSwKICB9Owp9KSh3aW5kb3cuc294ID0gd2luZG93LnNveCB8fCB7fSwgalF1ZXJ5KTsK"},{"meta":{"name":"sox.dialog.js","url":"https://github.com/soscripted/sox/raw/v2.7.0/sox.dialog.js","ts":1609797270580,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"sox.features.js","url":"https://github.com/soscripted/sox/raw/v2.7.0/sox.features.js","ts":1609797270702,"mimetype":"text/javascript"},"source":""}]},{"name":"Resize Image On \"Open image in new tab\"","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["https://*.douban.com/view/ark_article_cover/*","https://*.doubanio.com/view/ark_article_cover/*"],"orig_includes":[],"orig_matches":["http://*.googleusercontent.com/*","https://*.googleusercontent.com/*","http://*.media.tumblr.com/*","https://*.media.tumblr.com/*","http://secure.static.tumblr.com/*","https://secure.static.tumblr.com/*","http://*.bp.blogspot.com/*","https://*.bp.blogspot.com/*","http://*.sinaimg.cn/*","https://*.sinaimg.cn/*","http://*.sinaimg.com/*","https://*.sinaimg.com/*","http://*.twimg.com/*","https://*.twimg.com/*","http://*.zhimg.com/*","https://*.zhimg.com/*","http://*.douban.com/view/*","https://*.douban.com/view/*","http://*.doubanio.com/view/*","https://*.doubanio.com/view/*","http://imgsrc.baidu.com/*","https://imgsrc.baidu.com/*","http://imgsa.baidu.com/*","https://imgsa.baidu.com/*","http://*.hiphotos.baidu.com/*","https://*.hiphotos.baidu.com/*","http://*.bdimg.com/*","https://*.bdimg.com/*","http://images.akamai.steamusercontent.com/*","https://images.akamai.steamusercontent.com/*","http://steamuserimages-a.akamaihd.net/*","https://steamuserimages-a.akamaihd.net/*","http://*.artstation.com/*","https://*.artstation.com/*","http://i.ytimg.com/*","https://i.ytimg.com/*","http://*.ggpht.com/*","https://*.ggpht.com/*","http://*.pinimg.com/*","https://*.pinimg.com/*","http://*.hdslb.com/*","https://*.hdslb.com/*","http://*.alicdn.com/*","https://*.alicdn.com/*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1609797443674,"data":{}},"enabled":true,"position":8,"file_url":"https://greasyfork.org/scripts/2312-resize-image-on-open-image-in-new-tab/code/Resize%20Image%20On%20%22Open%20image%20in%20new%20tab%22.user.js","uuid":"d84aef74-1a57-41ed-839c-0f5df5c7b18c","source":""}]}