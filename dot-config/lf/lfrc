set shell dash
set shellopts '-eu'
set ifs "\n"
set scrolloff 5
# set color256
set icons
set period 1
# set hidden
set relativenumber
set drawbox
set previewer ~/.config/lf/previewer
set cleaner ~/.config/lf/cleaner
# set previewer ~/.config/lf/scope
source ~/.config/lf/shortcuts

# Vars that depend on environmental variables
# $lf -remote "send $id set previewer ${XDG_CONFIG_HOME:-$HOME/.config}/lf/scope"

# cmds/functions
cmd open ${{
    case $(file --mime-type $f -b) in
	audio/*) mpv --audio-display=no $f ;;
	application/json) $EDITOR $fx ;;
	image/vnd.djvu|application/pdf|application/octet-stream) setsid zathura $fx >/dev/null 2>&1 & ;;
	image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
	image/svg+xml) display -- $f ;;
	image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" | sxiv -aio 2>/dev/null | lf-select & ;;
	text/html) $BROWSER $f ;;
        text/*) $EDITOR $fx ;;
	video/*) setsid mpv $f -quiet >/dev/null 2>&1 & ;;
        # *) for f in $fx; do setsid $OPENER $f >/dev/null 2>&1 & done;;
        *) notify-send "No Mime Type set" ;;
    esac
}}

cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "extract?[y/N]"
	read ans
	[ $ans = "y" ] && ext $fx
}}

cmd mkdir %{{
    IFS=" "
    mkdir -p -- "$*"
    lf -remote "send $id select \"$*\""
}}

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}

cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(cut -d'	' -f2- ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|' )" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(cut -d'	' -f2- ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|' )" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

cmd broot_jump ${{
    f=$(mktemp)
    res="$(broot --outcmd $f && cat $f | sed 's/cd //')"
    rm -f "$f"
    if [ -f "$ref" ]; then
       cmd="select"
    elif [ -d "$res" ]; then
       cmd="cd"
    fi
    lf -remote "send $id $cmd \"$res\""

}}

cmd fzf_jump ${{
    res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ]; then
        cmd="cd"
    else
        cmd="select"
    fi
    lf -remote "send $id $cmd \"$res\""
}}

cmd zle-cd %printf 'cd %q && zle reset-prompt\n' "$PWD" >&$ZLE_FIFO

cmd zle-insert-relative %{{
    for f in $fx; do
        printf 'LBUFFER+="${LBUFFER:+ }${(q)$(realpath %q --relative-to=$PWD)}"\n' "$f" >&$ZLE_FIFO
    done
}}

cmd zle-insert-absolute %{{
    for f in $fx; do
        printf 'LBUFFER+="${LBUFFER:+ }%q"\n' "$f" >&$ZLE_FIFO
    done
}}

cmd zle-init :{{
    map . zle-cd
    map x zle-insert-relative
    map X zle-insert-absolute
}}

&[[ -n "$ZLE_FIFO" ]] && lf -remote "send $id zle-init"

cmd async_paste &{{
    set -- $(lf -remote load)
    mode="$1"
    shift
    case "$mode" in
        copy) cp -rn -- "$@" .;;
        move) mv -n -- "$@" .;;
    esac
    lf -remote "send load"
    lf -remote "send clear"
}}

cmd backup_paste %{{
    set -- $(lf -remote load)
    mode="$1"
    shift
    case "$mode" in
        copy) cp -r --backup=numbered -- "$@" .;;
        move) mv --backup=numbered -- "$@" .;;
    esac
    lf -remote "send load"
    lf -remote "send clear"
}}

cmd paste &{{
    set -- $(lf -remote load)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -av --ignore-existing --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            ;;
        move) mv -n -- "$@" .;;
    esac
    lf -remote "send load"
    lf -remote "send clear"
}}

cmd recol &{{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $w -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}


# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
    set -- $(lf -remote load)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
}}

cmd yank-dirname $dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard
cmd yank-basename $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard
cmd yank-basename-without-extension &basename -a -- $fx | rev | cut -d. -f2- | rev | head -c-1 | xclip -i -selection clipboard

cmd open-with %"$@" $fx

# cmd paste $cp-p --lf-paste $id

# Bindings
map <c-b> $setbg $f
map <c-e> down
map <c-f> :broot_jump
map <c-j> fzf_jump
map <c-n> push :mkdir<space>
map <c-r> reload
map <c-y> up
map <enter> shell
map C copyto
map D delete
map E extract
map I push A<c-a> # at the very beginning
map J $lf -remote "send $id cd $(cat ${XDG_CONFIG_HOME:-$HOME/.config}/lf/shortcuts | sed 's/^.*cd //g' | fzf)"
map M moveto
map Pp :link
map R push A<a-b> # after extention
map V push :!nvim<space>
map Yb yank-basename
map Ybe yank-basename-without-extension
map Yd yank-dirname
map Yp yank-path
map b $vidir
map c $vl $f
map gg top
map o push :open-with<space>
map Pa async_paste
map Pb backup_paste
# map A rename # at the very end
# map O $mimeopen --ask "$f"
# map X !$f
# map c push A<c-u> # new rename
# map i push A<a-b><a-b><a-f> # before extention
# map o &mimeopen $f
# map x $$f
